O:41:"Symfony\Component\HttpFoundation\Response":6:{s:7:"headers";O:50:"Symfony\Component\HttpFoundation\ResponseHeaderBag":5:{s:23:" * computedCacheControl";a:2:{s:8:"no-cache";b:1;s:7:"private";b:1;}s:10:" * cookies";a:0:{}s:14:" * headerNames";a:2:{s:13:"cache-control";s:13:"Cache-Control";s:4:"date";s:4:"Date";}s:10:" * headers";a:2:{s:13:"cache-control";a:1:{i:0;s:17:"no-cache, private";}s:4:"date";a:1:{i:0;s:29:"Fri, 24 Mar 2023 05:36:23 GMT";}}s:15:" * cacheControl";a:0:{}}s:10:" * content";s:112551:"<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8" />
    <title>Robot planetarny BOSCH MUM9BX5S65 Optimum &#43; Zamów z DOSTAWĄ JUTRO! &#43; DARMOWY TRANSPORT!, kolor srebrny  - Porownywarka.co
</title>
    <meta name="description" content="Roboty kuchenne; Producent: Bosch;
            Moc:     1500

W
;
            Kolor:     srebrny


;
        Nowy robot kuchenny OptiMUM: elegancki design, zintegrowana waga kuchenna, automatyczne programy sensor Control Plus oraz silnik o mocy 1500 W nadzwyczajne rezultaty.  niezwykle ergonomiczne rozwiązanie! Dzięki zaimplementowanej wadze wszystkie komponenty można zważyć bezpośrednio nie tylko w misie, lecz także blenderze kielichowym służącym do przygotowywania koktajli. Ciężar poszczególnych produktów odczytasz na elektronicznym wyświetlaczu.zawsze perfekcyjna konsystencja ciasta drożdżowego, bitej śmietany oraz piany z białek dzięki trzem inteligentnym, samoczynnym programom czujnik Control Plus. Zintegrowany timer pozwala na dodatek ustalić indywidualny czas pracy.znakomicie wyrobione ciasto: nad wyraz potężny silnik o mocy 1500 W, a także inteligentny czujka ciasta (Smart dough sensor). Trwała i mocna metalowa  oraz rewelacyjnie dobrane fachowe akcesoria.znakomite rezultaty dzięki planetarnemu ruchowi mieszadeł 3D: ciasto nie przykleja się do misy. Wygodną pracę zagwarantuje wielka misa ze stali szlachetnej o pojemności 5,5 l z dwoma uchwytami usprawniającymi przenoszenie.Dzięki szerokiej gamie akcesoriów zrealizujesz niemało kulinarnych pomysłów. Akcesoria są wyjątkowo nieskomplikowane do zainstalowania dzięki specjalnemu oznaczeniu ich kolorami. nieprzeciętne rezultaty  czujnik Control Plus: za każdym razem rewelacyjne rezultaty w przygotowaniu ciasta drożdzowego, bitej śmietany oraz piany z białek. Dzięki samoczynnym programom urządzenie zatrzymuje się, gdy tylko zostanie osiągnięty znakomity rezultat.Trwały silnik o mocy 1500 W perfekcyjny do wyrabiania nawet szczególnie ciężkich ciast.Planetarny ruch mieszadeł 3D: prędkie i wyjątkowo precyzyjne miksowanie komponentów w misie równocześnie w trzech kierunkach.Inteligentny czujnik ciasta (Smart dough detektor): perfekcyjne, prędkie rezultaty nawet przy wyrabianiu ciężkich ciast albo obszernych ilościach. Praca mieszadeł jest zawsze utrzymywana na stałym, wysokim poziomie prędkości. Wszechstronność  szeroka ilość akcesoriów opcjonalnych otwiera przestrzeń dla kreatywności w kuchni.Możliwość jednostkowej rozbudowy urządzenia o wyposażenie opcjonalne. Komfort  Zintegrowana waga kuchenna: składniki można ważyć bezpośrednio w misie - oszczędność czasu oraz miejsca podczas pracy.czujka Control Plus: 3 automatyczne programy (do ciasta drożdżowego, bitej śmietany i piany z białek) pozwolą zaoszczędzić czas oraz idealny efekt - monitorowanie urządzenia w trakcie pracy nie jest niezbędne.wbudowany timer: możliwość ustawienia czasu pracy - urządzenie zatrzymuje się po upływie wcześniej ustawionego przez użytkownika czasu.samoczynne rozpoznawanie wyposażenia (Smart tool detection): niezależnie od tego jakie wyposażenie jest używane OptiMUM reguluje rewelacyjną szybkość maksymalną dla każdego z nich.szczególnie znaczna misa o pojemności 5,5 l ze szczotkowanej stali nierdzewnej z dwoma poręcznymi uchwytami. Możliwość wyrobienia w jednym procesu do 3,5 kg lekkiego ciasta albo 1,5 kg mąki &amp;#43; dodatki w przypadku ciężkiego ciasta drożdżowego.7 stopniowa regulacja prędkości, a także funkcja Pulse indywidualny wybór szybkości roboczej.EasyArmLift: proste i proste podnoszenie ramienia urządzenia.Łatwe przechowywanie: samoczynne zwijanie kabla za jednym pociągnięciem. Materiał/design  znakomity design, robot demonstruje się elegancko na blacie każdej kuchni.wytrzymałość i odporność dzięki metalowej obudowie.Pokrywa napędów wytwarzana ze szczotkowanej stali szlachetnej nadaje urządzeniu wysokiej jakości wygląd. Bezpieczeństwo  Wysokie bezpieczeństwo dzięki pokrywie napędów.Zabezpieczenie przed przypadkowym włączeniem silnika.Gumowe nóżki w podstawie urządzenia zabezpieczające przed przesuwaniem w trakcie pracy. Wyposażenie  Kolorowe kody: każdy napęd a także komponenty wyposażenia mają specyficzny kod kolorystyczny upraszczający montaż akcesoriówMetalowe mieszadło do ubijania: regulowana wysokość umożliwa przygotowanie bitej śmietany lub piany z białek choćby z szczególnie niewielkiej albo niezwykle dużej ilości składników.Mieszadło elastyczne z silikonową nakładką: nieprzeciętne rezultaty dzięki genialnemu dobraniu silikonu do misy - absolutnie wszystkie elementy są przetwarzane równomiernie i nic nie przykleja się do misy.Hak do zagniatania ciasta: specjalny zarys haka umożlliwia &amp;#34;cięcie&amp;#34; a następnie ponowne zagniatanie ciasta. Dzięki czemu zagniatanie ciasta jest szczególnie intensywne i produktywne.Blender klielichowy Thermosafe o obszerności 2,3 l (z zawartością 1,5 l) o grubych szklanych ściankach umożliwia przetwarzanie zarówno wyjątkowo gorących zup jak i zimnych koktajli. Dzięki specjalnemu kształtowi blender jest wyjątkowo cichy.Maszynka do mielenia: znakomita do mielenia ascetycznego i gotowanego mięsa, ryb i warzyw. Znakomite rezultaty nawet przy przerabianiu obfitych ilości mięsa. Skuteczność 2 kg/min. 3 sita o średnicy oczek: 3 mm, 5 mm i 8 mm.bardzo wszechstronny i wielofunkcyjny multimikser: szybkie rozdrabnianie, ścieranie i krojenie warzyw i owoców, nóż do rozdrabniania ziół i orzechów a także wyciskarka do cytrusów.Tarcza do ścierania ziemniaków na placki ziemniaczane, pyzy, knedle (na drobną miazgę).Dwustronna tarcza SuperCut ze specjalnym zygzakowatym nożem do precyzyjnego krojenia np. Pomidorów, pora itd.
" />
            <meta name="viewport" content="width=device-width, initial-scale=1">


    <link rel="canonical" href="http://localhost:8000/produkt-roboty-kuchenne/robot-planetarny-bosch-mum9bx5s65-optimum-zamow-z-dostawa-jutro-darmowy-transport.html" />
        <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="/css/bootstrap.css" media="screen">
    <link rel="stylesheet" href="/css/owl.carousel.css">
    <link rel="stylesheet" href="/css/jquery.bxslider.css">
    <link rel="stylesheet" href="/css/theme-bootstrap.css">
    <link rel="stylesheet" href="/css/ecommerce-theme-bootstrap.css">
    <link href="/css/jquery.growl.css" rel="stylesheet" type="text/css"/>
    <link href="//maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css" rel="stylesheet">
        <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>

    <!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->

    <script type="text/javascript">
        function search() {
            var url = 'http://localhost:8000/produkty-produkt:_PHRASE_VALUE_.html';
            var phrase = $('#phraseInput').val().trim().toLowerCase();
            if (!phrase) {
                alert('Pole do wyszukiwania nie może być puste');
                return false;
            }
            phrase = phrase.replace(/\s+/g, '-');
            location.href = url.replace('_PHRASE_VALUE_', encodeURIComponent(phrase));
            return false;
        }

        $(function () {
            $('#searchFrom').on('submit', function () {
                return search()
            });
            $('#buttonSearch').on('click', function () {
                return search()
            });
        });
    </script>
    </head>
<body>
    <div class="navbar navbar-default navbar-fixed-top yamm">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse"
                        data-target=".navbar-responsive-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand" href="/">Porownywarka.co</a>
            </div>
            <div class="navbar-collapse collapse navbar-responsive-collapse">

                <ul class="nav navbar-nav">
            <li class="dropdown yamm-fw  active">
            <a href="#" data-toggle="dropdown" class="dropdown-toggle">Kategorie I <b class="caret"></b></a>
            <ul class="dropdown-menu">
                <li>
                    <div class="row">

                        <div class="col-sm-3">

                            <ul class="dropdown-menu dropdown-menu-inner">
                                <li class="dropdown-header">Kategorie</li>
                                                                    <li><a href="http://localhost:8000/kategoria-muzyka" title="Muzyka">Muzyka</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-filmy" title="Filmy">Filmy</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-fotografia-i-optyka" title="Fotografia i optyka">Fotografia i optyka</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-komputery" title="Komputery">Komputery</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-albumy" title="Albumy">Albumy</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-sprzet-rtv" title="Sprzęt RTV">Sprzęt RTV</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-sprzet-agd" title="Sprzęt AGD">Sprzęt AGD</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-gry-i-konsole" title="Gry i konsole">Gry i konsole</a></li>
                                                            </ul>

                        </div>
                                                    <div class="col-sm-9">

                                <div class="row">
                                    <div class="col-sm-12 col-xs-12">
                                        <span class="dropdown-header dropdown-header-no-list">Popularne produkty</span>
                                    </div>
                                </div>

                                <div class="row">
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-sluchawki/sony-mdr-rf895.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-fe-57-fe5750ad73040ae221f65cfbcaae163a90x90/sony-mdr-rf895.jpg" />
                                                    </div>
                                                    <span class="price">od 379,04 PLN</span>
                                                    <h5 class="title">Sony MDR-RF895</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-roboty-kuchenne/robot-planetarny-bosch-mum9bx5s65-optimum-zamow-z-dostawa-jutro-darmowy-transport.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-1d-ea-1dea070b6aba94bbdfc11d80263673f190x90/robot-planetarny-bosch-mum9bx5s65-optimum-43-zamw-z-dostaw-jutro-43-darmowy-transport-kolor-srebrny.jpg" />
                                                    </div>
                                                    <span class="price">od 3649,00 PLN</span>
                                                    <h5 class="title">Robot planetarny BOSCH MUM9BX5S65 Optimum &#43; Zamów z DOSTAWĄ JUTRO! &#43; DARMOWY TRANSPORT!, kolor srebrny</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-sluchawki/jbl-t225.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-3f-41-3f41a1801783ad7c74f0f9443a3c28f390x90/jbl-t225.jpg" />
                                                    </div>
                                                    <span class="price">od 386,31 PLN</span>
                                                    <h5 class="title">JBL T225</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-sluchawki/beats-by-dr-dre-studio-3.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-0a-e8-0ae87a96abbc3ccf37d1f3a05f17d3a490x90/beats-by-dr-dre-studio-3.jpg" />
                                                    </div>
                                                    <span class="price">od 1299,00 PLN</span>
                                                    <h5 class="title">Beats by Dr. Dre Studio 3</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-sluchawki/sony-wf-1000.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-6d-d6-6dd67f7b817841b6e3cb91c81ec30c7390x90/sony-wf-1000.jpg" />
                                                    </div>
                                                    <span class="price">od 839,00 PLN</span>
                                                    <h5 class="title">Sony WF-1000</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-sluchawki/xiaomi-redmi-buds-3.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-cd-ad-cdad5f581d0024667108791ce91b13f490x90/xiaomi-redmi-buds-3.jpg" />
                                                    </div>
                                                    <span class="price">od 84,99 PLN</span>
                                                    <h5 class="title">Xiaomi Redmi Buds 3</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                    </div>

                            </div>
                                            </div>
                </li>
            </ul>
        </li>
                <li class="dropdown yamm-fw ">
            <a href="#" data-toggle="dropdown" class="dropdown-toggle">Kategorie II <b class="caret"></b></a>
            <ul class="dropdown-menu">
                <li>
                    <div class="row">

                        <div class="col-sm-3">

                            <ul class="dropdown-menu dropdown-menu-inner">
                                <li class="dropdown-header">Kategorie</li>
                                                                    <li><a href="http://localhost:8000/kategoria-inne" title="Inne">Inne</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-telefony-i-akcesoria" title="Telefony i akcesoria">Telefony i akcesoria</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-motoryzacja" title="Motoryzacja">Motoryzacja</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-zdrowie" title="Zdrowie">Zdrowie</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-moda-i-styl" title="Moda i styl">Moda i styl</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-sport-i-hobby" title="Sport i hobby">Sport i hobby</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-delikatesy" title="Delikatesy">Delikatesy</a></li>
                                                            </ul>

                        </div>
                                                    <div class="col-sm-9">

                                <div class="row">
                                    <div class="col-sm-12 col-xs-12">
                                        <span class="dropdown-header dropdown-header-no-list">Popularne produkty</span>
                                    </div>
                                </div>

                                <div class="row">
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-bieznie/bieznia-elektryczna-kinetic-2900.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-9d-14-9d145773c53a6844b286bfb45d1cf8ed90x90/bienia-elektryczna-kinetic-2900-4260495759791.jpg" />
                                                    </div>
                                                    <span class="price">999,00 PLN</span>
                                                    <h5 class="title">Bieżnia elektryczna Kinetic 2900 (4260495759791)</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-telefony-komorkowe/samsung-galaxy-s20-fe-5g-sm-g781.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-39-68-396882215d00a7811b9ab789dab51aa190x90/samsung-galaxy-s20-fe-5g-sm-g781.jpg" />
                                                    </div>
                                                    <span class="price">od 1977,00 PLN</span>
                                                    <h5 class="title">Samsung Galaxy S20 FE 5G SM-G781</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-bieznie/bieznia-elektryczna-kinetic-do-10-km.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-dd-8d-dd8d07585cd08e9442f64a43eb83ac4d90x90/bienia-elektryczna-kinetic-do-10-km-4260495754925.jpg" />
                                                    </div>
                                                    <span class="price">od 799,00 PLN</span>
                                                    <h5 class="title">Bieżnia elektryczna Kinetic do 10 km (4260495754925)</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-telefony-komorkowe/apple-iphone-11-64gb.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-7b-a4-7ba42684bfa28bd9deb05cadfed989db90x90/apple-iphone-11-64gb.jpg" />
                                                    </div>
                                                    <span class="price">od 2040,00 PLN</span>
                                                    <h5 class="title">Apple iPhone 11 64GB</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-telefony-komorkowe/samsung-galaxy-m23.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-4b-93-4b93cf43b244aa554ffb7042ba34860890x90/samsung-galaxy-m23.jpg" />
                                                    </div>
                                                    <span class="price">od 949,00 PLN</span>
                                                    <h5 class="title">Samsung Galaxy M23</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-telefony-komorkowe/samsung-galaxy-a33.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-fa-fc-fafc362d3cbe897af4573106117165db90x90/samsung-galaxy-a33.jpg" />
                                                    </div>
                                                    <span class="price">od 1333,00 PLN</span>
                                                    <h5 class="title">Samsung Galaxy A33</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                    </div>

                            </div>
                                            </div>
                </li>
            </ul>
        </li>
                <li class="dropdown yamm-fw ">
            <a href="#" data-toggle="dropdown" class="dropdown-toggle">Kategorie III <b class="caret"></b></a>
            <ul class="dropdown-menu">
                <li>
                    <div class="row">

                        <div class="col-sm-3">

                            <ul class="dropdown-menu dropdown-menu-inner">
                                <li class="dropdown-header">Kategorie</li>
                                                                    <li><a href="http://localhost:8000/kategoria-dla-dzieci" title="Dla dzieci">Dla dzieci</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-prezenty" title="Prezenty">Prezenty</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-kosmetyki" title="Kosmetyki">Kosmetyki</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-erotyka" title="Erotyka">Erotyka</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-biznes" title="Biznes">Biznes</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-dom-i-ogrod" title="Dom i ogród">Dom i ogród</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-narzedzia" title="Narzędzia">Narzędzia</a></li>
                                                            </ul>

                        </div>
                                                    <div class="col-sm-9">

                                <div class="row">
                                    <div class="col-sm-12 col-xs-12">
                                        <span class="dropdown-header dropdown-header-no-list">Popularne produkty</span>
                                    </div>
                                </div>

                                <div class="row">
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-lustra-lazienkowe/lustro-lazienkowe-podswietlane-led-80x60cm-73f54d3292c0136242647de5a50201a4.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-d4-db-d4db2393d96f8f5ac49ebca45f3564d890x90/lustro-azienkowe-podwietlane-led-80x60cm-led4-80x60cm.jpg" />
                                                    </div>
                                                    <span class="price">399,00 PLN</span>
                                                    <h5 class="title">Lustro łazienkowe podświetlane led 80x60cm, LED4 80x60cm</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-drzwi-prysznicowe/drzwi-prysznicowe-przesuwne-liniger-d20-premium.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-52-ae-52ae3bbfeafacdf5b16db012181b4c2d90x90/drzwi-prysznicowe-przesuwne-liniger-d20-premium.jpg" />
                                                    </div>
                                                    <span class="price">1309,00 PLN</span>
                                                    <h5 class="title">Drzwi Prysznicowe Przesuwne Liniger D20 PREMIUM</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-pily-lancuchowe/imoum-live-lancuchowa-mini-pila-elektryczna.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-9d-80-9d80cf4079f092f17984b56fb2e1c75e90x90/imoum-live-acuchowa-mini-pia-elektryczna.jpg" />
                                                    </div>
                                                    <span class="price">549,00 PLN</span>
                                                    <h5 class="title">Imoum Live Łańcuchowa mini piła elektryczna</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-pozostale-poza-domem/daszek-zadaszenie-systemowe-drzwi-modern-300x060-a072f751415d59bd5570d3bc2654357b.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-91-6b-916b644d5ac7d82fdb5fa8e158e61ed590x90/metal-gum-daszek-zadaszenie-systemowe-drzwi-modern-300x060.jpg" />
                                                    </div>
                                                    <span class="price">289,00 PLN</span>
                                                    <h5 class="title">Metal-gum Daszek zadaszenie systemowe drzwi modern 300x060</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-wertykulatory/wertykulator-i-aerator-einhell-gc-sa-1231-2w1.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-88-26-8826f253afe94dbc610f62214590675090x90/einhell-wertykulator-i-aerator-gc-sa-1231-2w1.jpg" />
                                                    </div>
                                                    <span class="price">551,99 PLN</span>
                                                    <h5 class="title">Einhell Wertykulator i aerator gc-sa 1231 2w1</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-mapy/tablica-mapa-2x3-officeboard-mapa-administracyjna-polski-102-5x120cm-plyta-magnetyczna-lakierowana-multimediaszkolne-pl-f208f4.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-2d-31-2d3141b88e0ac962c28f2271532c596c90x90/tablica-mapa-2x3-officeboard-mapa-administracyjna-polski-1025x120cm-pyta-magnetyczna-lakierowana-tmpa2m.jpg" />
                                                    </div>
                                                    <span class="price">361,28 PLN</span>
                                                    <h5 class="title">Tablica mapa 2x3 officeBoard – Mapa administracyjna Polski 102,5x120cm, płyta magnetyczna lakierowana, TMPA2M</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                    </div>

                            </div>
                                            </div>
                </li>
            </ul>
        </li>
    </ul>
                <form id="searchFrom" class="navbar-form navbar-right">
                    <div class="input-group input-group-with-btn">
                        <input id="phraseInput" type="text" class="form-control input-lg"
                               value="" placeholder="Szukam...">
                        <span class="input-group-btn">
                  <button id="buttonSearch" class="btn btn-link" type="button"><i class="fa fa-search"></i></button>
                </span>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="container top">

                                    <div class="row">
                    <div class="col-lg-12 col-md-12 col-sm-12">
                        <ul class="breadcrumb">
                            <li><a href="/">Porownywarka.co</a></li>
                                                                                                <li class="active">Kategorie I</li>
                                                                                            
                                    <li><a href="/kategoria-sprzet-agd">Sprzęt AGD</a></li>
                                                                                            
                                    <li><a href="/kategoria-krojenie-mielenie-i-wazenie">Krojenie, mielenie i ważenie</a></li>
                                                                                            
                                    <li><a href="/kategoria-roboty-kuchenne">Roboty kuchenne</a></li>
                                                                                                                                <li class="active">Robot planetarny BOSCH MUM9BX5S65 Optimum &#43; Zamów z DOSTAWĄ JUTRO! &#43; DARMOWY TRANSPORT!, kolor srebrny</li>
                                                                                    </ul>
                    </div>
                </div>
                    
        
            <div class="row product product-details">
    <div class="col-md-4 col-sm-12 gallery">
        <ul class="bxslider gallery-view">
                                                                        <li><img class="img-responsive"
                                 src="http://offers.gallery/p-1d-ea-1dea070b6aba94bbdfc11d80263673f1500x500/robot-planetarny-bosch-mum9bx5s65-optimum-43-zamw-z-dostaw-jutro-43-darmowy-transport-kolor-srebrny.jpg"
                                 alt="Robot planetarny BOSCH MUM9BX5S65 Optimum &amp;#43; Zamów z DOSTAWĄ JUTRO! &amp;#43; DARMOWY TRANSPORT!, kolor srebrny"></li>
                                                        </ul>
        <div id="gallery-items" class="row gallery-items">
                                                                        <div class="col-lg-3 col-md-4 col-sm-2 col-xs-3 gallery-item"><a
                                    data-slide-index="0" href=""><img class="img-responsive"
                                                                                      src="http://offers.gallery/p-1d-ea-1dea070b6aba94bbdfc11d80263673f190x90/robot-planetarny-bosch-mum9bx5s65-optimum-43-zamw-z-dostaw-jutro-43-darmowy-transport-kolor-srebrny.jpg"/></a>
                        </div>
                                                        </div>
    </div>
    <div class="col-md-8 col-sm-12">
        <div class="row">
            <div class="col-md-8 col-sm-12">
                <h1 class="price">Robot planetarny BOSCH MUM9BX5S65 Optimum &#43; Zamów z DOSTAWĄ JUTRO! &#43; DARMOWY TRANSPORT!, kolor srebrny
                    <small class="stars">Ocena produktu:
                                                                                    <i class="product-star fa fa-star"
                                   data-star-current="4"
                                   data-star-nr="1"></i>
                                                                                                                <i class="product-star fa fa-star"
                                   data-star-current="4"
                                   data-star-nr="2"></i>
                                                                                                                <i class="product-star fa fa-star"
                                   data-star-current="4"
                                   data-star-nr="3"></i>
                                                                                                                <i class="product-star fa fa-star"
                                   data-star-current="4"
                                   data-star-nr="4"></i>
                                                                                                                <i class="product-star fa fa-star-o"
                                   data-star-current="4"
                                   data-star-nr="5"></i>
                                                                        </small>
                </h1>
            </div>
            <div class="col-md-4 col-sm-12 text-right">
                <p class="lead price big"><small>od </small>3649,00 PLN
                </p>
                                            </div>
            <div class="col-md-12 col-sm-12">
                <ul class="features">
    <li>Producent: <em>Bosch</em></li>
    <li>Kategoria: <em>Roboty kuchenne</em></li>
            <li>Moc:
            <em>    1500

W
</em>
        </li>
            <li>Kolor:
            <em>    srebrny


</em>
        </li>
    </ul>            </div>
        </div>

        <ul class="nav nav-tabs">
            <li class="active"><a href="#offers" data-toggle="tab">Oferty (3)</a></li>
            <li><a href="#desc" data-toggle="tab">Opis produktu</a></li>

        </ul>
        <div class="tab-content">
            <div class="tab-pane fade active in" id="offers">

                <div class="row pull-right options">
                    <div class="col-md-12 col-sm-12">
                        <div class="btn-group">
                            <a href="#" class="btn btn-link dropdown-toggle" data-toggle="dropdown">
                                <i class="fa fa-bars"></i>
                            </a>
                            <ul id="sortOffersSelect" class="dropdown-menu dropdown-menu-right">
                                <li class="dropdown-header">Sortowanie</li>
                                <li class="active"><a href="#domyslne"><i class="fa fa-long-arrow-down"></i>
                                        domyślne</a></li>
                                <li><a href="#najtansze"><i class="fa fa-sort-numeric-asc"></i> od najtańszych</a></li>
                                <li><a href="#najdrozsze"><i class="fa fa-sort-numeric-desc"></i> od najdroższych</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>

                <div id="offersContainer" class="row offers">
                                            <!-- offer starts here -->
                        <div class="col-sm-12 offer" data-lp="1"
                             data-price="3649.00">
                            <a rel="nofollow" target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253DwaHoX13Sk4pQ5eOioqwaAx0jzeQjnuzBU83lmpkfymZHmTDuMjL1uIjqcHZ0eITl0Q7wBdGaQJZ4nq2SCozy0XupMYBxb0yeDGnm1tckL3jxZ8bYUM1YX%2524mHOVrvjCbU_O.API_1_3_">
                                <div class="row">
                                    <div class="col-xs-4 col-sm-2">
                                        <div class="image">
                                            <img src="http://offers.gallery/p-8a-80-8a80f5a5e2564693cde29b93ede6a32790x90/mum9bx5s61-robot-bosch.jpg"/>
                                        </div>
                                    </div>
                                    <div class="col-xs-8 col-sm-7">
                                        <h5>MUM9BX5S61 Robot BOSCH</h5>
                                        <div class="pull-right">
                                                                                            <small class="stars">
                                                    Ocena sklepu:
                                                                                                                                                                        <i class="fa fa-star"></i>
                                                                                                                                                                                                                                <i class="fa fa-star"></i>
                                                                                                                                                                                                                                <i class="fa fa-star"></i>
                                                                                                                                                                                                                                <i class="fa fa-star"></i>
                                                                                                                                                                                                                                <i class="fa fa-star-half-o"></i>
                                                                                                                                                            </small>
                                                                                        <img src="http://offers.gallery/s/18816-20220912130139.png"
                                                 style="max-width: 88px; max-height: 31px;"/>
                                        </div>
                                    </div>
                                    <div class="col-xs-12 col-sm-3 text-right">
                                        <p class="lead price">3649,00 PLN</p>
                                        <span class="btn btn-success btn-success-outlined btn-icon-right">Zobacz w sklepie <i
                                                    class="fa fa-angle-right"></i></span>
                                    </div>
                                </div>
                            </a>
                        </div>
                        <!-- offer ends here -->
                                            <!-- offer starts here -->
                        <div class="col-sm-12 offer" data-lp="2"
                             data-price="3649.00">
                            <a rel="nofollow" target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253DNXJnbyLgh2JIb2VMSMwA1OxCc9UzNVH%252Ae6jlA3rVqN%252AxwI%252A3u7jQyiZtIdjmu8BXmqio%252ASSr8XfJ1Hn06w%252AM1XRUjyTqiBNpaA6quqstVhoUciLS72Ht57K1%2524%2524yEmv9f_O.API_2_3_">
                                <div class="row">
                                    <div class="col-xs-4 col-sm-2">
                                        <div class="image">
                                            <img src="http://offers.gallery/p-80-96-8096b17430abb27fab5d56ded3c0eeb390x90/bosch-optimum-mum9bx5s61-z-maszynk-do-mielenia-1600w-misa-55l.jpg"/>
                                        </div>
                                    </div>
                                    <div class="col-xs-8 col-sm-7">
                                        <h5>Bosch OptiMUM MUM9BX5S61 z maszynką do mielenia - 1600W - misa 5,5l</h5>
                                        <div class="pull-right">
                                                                                            <small class="stars">
                                                    Ocena sklepu:
                                                                                                                                                                        <i class="fa fa-star"></i>
                                                                                                                                                                                                                                <i class="fa fa-star"></i>
                                                                                                                                                                                                                                <i class="fa fa-star"></i>
                                                                                                                                                                                                                                <i class="fa fa-star"></i>
                                                                                                                                                                                                                                <i class="fa fa-star-half-o"></i>
                                                                                                                                                            </small>
                                                                                        <img src="http://offers.gallery/s/4342-20220909103334.png"
                                                 style="max-width: 88px; max-height: 31px;"/>
                                        </div>
                                    </div>
                                    <div class="col-xs-12 col-sm-3 text-right">
                                        <p class="lead price">3649,00 PLN</p>
                                        <span class="btn btn-success btn-success-outlined btn-icon-right">Zobacz w sklepie <i
                                                    class="fa fa-angle-right"></i></span>
                                    </div>
                                </div>
                            </a>
                        </div>
                        <!-- offer ends here -->
                                            <!-- offer starts here -->
                        <div class="col-sm-12 offer" data-lp="3"
                             data-price="3649.00">
                            <a rel="nofollow" target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253Dvpsl%252AJ0HpsT7VDrD69FH%2524acnjIW5rUBQyG9YcOCkJz45u6YYI4gEAUUYfOP2kubehwRcDD1qwQFWgHHiIMGrRqHqKh6WKxVXXSpsiX2AYSu5oPDoR9ps8Z2uiLwoN1sg_O.API_3_3_">
                                <div class="row">
                                    <div class="col-xs-4 col-sm-2">
                                        <div class="image">
                                            <img src="http://offers.gallery/p-00-62-0062131885777c2d6380b097f856eb9090x90/bosch-optimum-mum9bx5s61-z-maszynk-do-mielenia-1600w-misa-55l.jpg"/>
                                        </div>
                                    </div>
                                    <div class="col-xs-8 col-sm-7">
                                        <h5>Bosch OptiMUM MUM9BX5S61 z maszynką do mielenia - 1600W - misa 5,5l</h5>
                                        <div class="pull-right">
                                                                                            <small class="stars">
                                                    Ocena sklepu:
                                                                                                                                                                        <i class="fa fa-star"></i>
                                                                                                                                                                                                                                <i class="fa fa-star"></i>
                                                                                                                                                                                                                                <i class="fa fa-star"></i>
                                                                                                                                                                                                                                <i class="fa fa-star"></i>
                                                                                                                                                                                                                                <i class="fa fa-star-half-o"></i>
                                                                                                                                                            </small>
                                                                                        <img src="http://offers.gallery/s/632-20220908114301.png"
                                                 style="max-width: 88px; max-height: 31px;"/>
                                        </div>
                                    </div>
                                    <div class="col-xs-12 col-sm-3 text-right">
                                        <p class="lead price">3649,00 PLN</p>
                                        <span class="btn btn-success btn-success-outlined btn-icon-right">Zobacz w sklepie <i
                                                    class="fa fa-angle-right"></i></span>
                                    </div>
                                </div>
                            </a>
                        </div>
                        <!-- offer ends here -->
                                    </div>
            </div>
            <div class="tab-pane fade description" id="desc">
                <b>Nowy robot kuchenny OptiMUM: elegancki design, zintegrowana waga kuchenna, automatyczne programy sensor Control Plus oraz silnik o mocy 1500 W nadzwyczajne rezultaty.</b><br /> <br /> <ul><li>niezwykle ergonomiczne rozwiązanie! Dzięki zaimplementowanej wadze wszystkie komponenty można zważyć bezpośrednio nie tylko w misie, lecz także blenderze kielichowym służącym do przygotowywania koktajli. Ciężar poszczególnych produktów odczytasz na elektronicznym wyświetlaczu.</li><li>zawsze perfekcyjna konsystencja ciasta drożdżowego, bitej śmietany oraz piany z białek dzięki trzem inteligentnym, samoczynnym programom czujnik Control Plus. Zintegrowany timer pozwala na dodatek ustalić indywidualny czas pracy.</li><li>znakomicie wyrobione ciasto: nad wyraz potężny silnik o mocy 1500 W, a także inteligentny czujka ciasta (Smart dough sensor). Trwała i mocna metalowa  oraz rewelacyjnie dobrane fachowe akcesoria.</li><li>znakomite rezultaty dzięki planetarnemu ruchowi mieszadeł 3D: ciasto nie przykleja się do misy. Wygodną pracę zagwarantuje wielka misa ze stali szlachetnej o pojemności 5,5 l z dwoma uchwytami usprawniającymi przenoszenie.</li><li>Dzięki szerokiej gamie akcesoriów zrealizujesz niemało kulinarnych pomysłów. Akcesoria są wyjątkowo nieskomplikowane do zainstalowania dzięki specjalnemu oznaczeniu ich kolorami.</li></ul><br /> <b>nieprzeciętne rezultaty</b><br /> <br /> <ul><li>czujnik Control Plus: za każdym razem rewelacyjne rezultaty w przygotowaniu ciasta drożdzowego, bitej śmietany oraz piany z białek. Dzięki samoczynnym programom urządzenie zatrzymuje się, gdy tylko zostanie osiągnięty znakomity rezultat.</li><li>Trwały silnik o mocy 1500 W perfekcyjny do wyrabiania nawet szczególnie ciężkich ciast.</li><li>Planetarny ruch mieszadeł 3D: prędkie i wyjątkowo precyzyjne miksowanie komponentów w misie równocześnie w trzech kierunkach.</li><li>Inteligentny czujnik ciasta (Smart dough detektor): perfekcyjne, prędkie rezultaty nawet przy wyrabianiu ciężkich ciast albo obszernych ilościach. Praca mieszadeł jest zawsze utrzymywana na stałym, wysokim poziomie prędkości.</li></ul><br /> <b>Wszechstronność</b><br /> <br /> <ul><li>szeroka ilość akcesoriów opcjonalnych otwiera przestrzeń dla kreatywności w kuchni.</li><li>Możliwość jednostkowej rozbudowy urządzenia o wyposażenie opcjonalne.</li></ul><br /> <b>Komfort</b><br /> <br /> <ul><li>Zintegrowana waga kuchenna: składniki można ważyć bezpośrednio w misie - oszczędność czasu oraz miejsca podczas pracy.</li><li>czujka Control Plus: 3 automatyczne programy (do ciasta drożdżowego, bitej śmietany i piany z białek) pozwolą zaoszczędzić czas oraz idealny efekt - monitorowanie urządzenia w trakcie pracy nie jest niezbędne.</li><li>wbudowany timer: możliwość ustawienia czasu pracy - urządzenie zatrzymuje się po upływie wcześniej ustawionego przez użytkownika czasu.</li><li>samoczynne rozpoznawanie wyposażenia (Smart tool detection): niezależnie od tego jakie wyposażenie jest używane OptiMUM reguluje rewelacyjną szybkość maksymalną dla każdego z nich.</li><li>szczególnie znaczna misa o pojemności 5,5 l ze szczotkowanej stali nierdzewnej z dwoma poręcznymi uchwytami. Możliwość wyrobienia w jednym procesu do 3,5 kg lekkiego ciasta albo 1,5 kg mąki &#43; dodatki w przypadku ciężkiego ciasta drożdżowego.</li><li>7 stopniowa regulacja prędkości, a także funkcja Pulse indywidualny wybór szybkości roboczej.</li><li>EasyArmLift: proste i proste podnoszenie ramienia urządzenia.</li><li>Łatwe przechowywanie: samoczynne zwijanie kabla za jednym pociągnięciem.</li></ul><br /> <b>Materiał/design</b><br /> <br /> <ul><li>znakomity design, robot demonstruje się elegancko na blacie każdej kuchni.</li><li>wytrzymałość i odporność dzięki metalowej obudowie.</li><li>Pokrywa napędów wytwarzana ze szczotkowanej stali szlachetnej nadaje urządzeniu wysokiej jakości wygląd.</li></ul><br /> <b>Bezpieczeństwo</b><br /> <br /> <ul><li>Wysokie bezpieczeństwo dzięki pokrywie napędów.</li><li>Zabezpieczenie przed przypadkowym włączeniem silnika.</li><li>Gumowe nóżki w podstawie urządzenia zabezpieczające przed przesuwaniem w trakcie pracy.</li></ul><br /> <b>Wyposażenie</b><br /> <br /> <ul><li>Kolorowe kody: każdy napęd a także komponenty wyposażenia mają specyficzny kod kolorystyczny upraszczający montaż akcesoriów</li><li>Metalowe mieszadło do ubijania: regulowana wysokość umożliwa przygotowanie bitej śmietany lub piany z białek choćby z szczególnie niewielkiej albo niezwykle dużej ilości składników.</li><li>Mieszadło elastyczne z silikonową nakładką: nieprzeciętne rezultaty dzięki genialnemu dobraniu silikonu do misy - absolutnie wszystkie elementy są przetwarzane równomiernie i nic nie przykleja się do misy.</li><li>Hak do zagniatania ciasta: specjalny zarys haka umożlliwia &#34;cięcie&#34; a następnie ponowne zagniatanie ciasta. Dzięki czemu zagniatanie ciasta jest szczególnie intensywne i produktywne.</li><li>Blender klielichowy Thermosafe o obszerności 2,3 l (z zawartością 1,5 l) o grubych szklanych ściankach umożliwia przetwarzanie zarówno wyjątkowo gorących zup jak i zimnych koktajli. Dzięki specjalnemu kształtowi blender jest wyjątkowo cichy.</li><li>Maszynka do mielenia: znakomita do mielenia ascetycznego i gotowanego mięsa, ryb i warzyw. Znakomite rezultaty nawet przy przerabianiu obfitych ilości mięsa. Skuteczność 2 kg/min. 3 sita o średnicy oczek: 3 mm, 5 mm i 8 mm.</li><li>bardzo wszechstronny i wielofunkcyjny multimikser: szybkie rozdrabnianie, ścieranie i krojenie warzyw i owoców, nóż do rozdrabniania ziół i orzechów a także wyciskarka do cytrusów.</li><li>Tarcza do ścierania ziemniaków na placki ziemniaczane, pyzy, knedle (na drobną miazgę).</li><li>Dwustronna tarcza SuperCut ze specjalnym zygzakowatym nożem do precyzyjnego krojenia np. Pomidorów, pora itd.</li></ul>
            </div>
        </div>
    </div>
</div>    
            <div class="row lower-double products">
            <div class="col-xs-8">
                <h4>Produkty podobne</h4>
            </div>
            <div class="col-xs-4 text-right">
                <a id="products-similar-prev" class="btn btn-sm btn-primary btn-primary-outlined"><i class="fa fa-angle-left"></i></a>
                <a id="products-similar-next" class="btn btn-sm btn-primary btn-primary-outlined"><i class="fa fa-angle-right"></i></a>
            </div>
        </div>

        <div class="row">
        <div id="products-similar" class=" owl-carousel">
                                <div>
    <div class="col-xs-12 product-wrapper-grid">
        <div class="product normal">
            <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253D%252AkYX6eJM7dZsjgkB9kfB9A1ozoOGNlVVFZWns6vFHRKshyPrFV7DxBrswCJMwsb%2524DeIpI7%2524HHAg3NvR62JtG1HhIIDyHc%252A1Wcy9%252AJ0F9t1k9M9r624CLhAgOCa4fD0E6_P.API_1_10_" rel="nofollow">
                <div class="image">
                    <img class="img-responsive" title="Robot BOSCH MUM 54251, MUM 54251"
                         src="http://offers.gallery/p-50-b5-50b518b9d3811f51847e4bc18590b71a500x500/robot-bosch-mum-54251-mum-54251.jpg"/>
                </div>
            </a>
            <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253D%252AkYX6eJM7dZsjgkB9kfB9A1ozoOGNlVVFZWns6vFHRKshyPrFV7DxBrswCJMwsb%2524DeIpI7%2524HHAg3NvR62JtG1HhIIDyHc%252A1Wcy9%252AJ0F9t1k9M9r624CLhAgOCa4fD0E6_P.API_1_10_" rel="nofollow">
                <h5 class="title">Robot BOSCH MUM 54251, MUM 54251</h5>
            </a>

            <div class="product-details-popup text-center">
                                <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253D%252AkYX6eJM7dZsjgkB9kfB9A1ozoOGNlVVFZWns6vFHRKshyPrFV7DxBrswCJMwsb%2524DeIpI7%2524HHAg3NvR62JtG1HhIIDyHc%252A1Wcy9%252AJ0F9t1k9M9r624CLhAgOCa4fD0E6_P.API_1_10_" rel="nofollow" data-container="body" data-placement="left" data-toggle="tooltip">
                    <i class="fa fa-align-justify"></i>
                    <div class="tooltip_title_wrapper hidden">
                        <p>parametry dodatkowe: schowek na akcesoria Długość kabla zasilającego: 1,1 mFunkcje użytkowe: ubijaniewyrabianie ciastamiksowaniewyciskaniekrojenieścieranieucieranie Funkcje użytkowe: wyrabianie...</p>

                    </div>
                </a>
                
                                                                    <a href="/produkt-roboty-kuchenne/robot-bosch-mum-54251.html"><i class="fa fa-link"></i></a>
                            </div>
            <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253D%252AkYX6eJM7dZsjgkB9kfB9A1ozoOGNlVVFZWns6vFHRKshyPrFV7DxBrswCJMwsb%2524DeIpI7%2524HHAg3NvR62JtG1HhIIDyHc%252A1Wcy9%252AJ0F9t1k9M9r624CLhAgOCa4fD0E6_P.API_1_10_" rel="nofollow">
                <div class="row">
                    <div class="col-xs-12 text-center">
                        <span class="price lead">1 229,00 PLN</span>
                            <span class="btn btn-success btn-success-outlined btn-icon-right">Zobacz w sklepie                                <i class="fa fa-angle-right"></i>
                            </span>
                    </div>
                </div>
            </a>
        </div>
    </div>
</div>                                <div>
    <div class="col-xs-12 product-wrapper-grid">
        <div class="product normal">
            <a href="/produkt-roboty-kuchenne/bosch-robot-kuchenny-mum9b34s27.html">
                <div class="image">
                    <img class="img-responsive" title="robot kuchenny mum9b34s27 marki Bosch"
                         src="http://offers.gallery/p-fa-78-fa78dd4f8739127edf3ed13855616708500x500/robot-kuchenny-mum9b34s27-marki-bosch.jpg"/>
                </div>
            </a>
            <a href="/produkt-roboty-kuchenne/bosch-robot-kuchenny-mum9b34s27.html">
                <h5 class="title">robot kuchenny mum9b34s27 marki Bosch</h5>
            </a>

            <div class="product-details-popup text-center">
                                <a href="/produkt-roboty-kuchenne/bosch-robot-kuchenny-mum9b34s27.html" data-container="body" data-placement="left" data-toggle="tooltip">
                    <i class="fa fa-align-justify"></i>
                    <div class="tooltip_title_wrapper hidden">
                        <p>Robot kuchenny OptiMUM jest automatycznie nastawiony na nieprzeciętny efekt. Efektywny silnik, wysokiej jakości metalowa obudowa, istotnie obfita misa ze stali szlachetnej o pojemności 5,5 l i...</p>

                    </div>
                </a>
                
                                                            </div>
            <a href="/produkt-roboty-kuchenne/bosch-robot-kuchenny-mum9b34s27.html">
                <div class="row">
                    <div class="col-xs-12 text-center">
                        <span class="price lead">od 2 239,00 PLN</span>
                            <span class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty                                <i class="fa fa-angle-right"></i>
                            </span>
                    </div>
                </div>
            </a>
        </div>
    </div>
</div>                                <div>
    <div class="col-xs-12 product-wrapper-grid">
        <div class="product normal">
            <a href="/produkt-roboty-kuchenne/robot-planetarny-bosch-mum9bx5s65-optimum-zamow-z-dostawa-jutro-darmowy-transport.html">
                <div class="image">
                    <img class="img-responsive" title="Robot planetarny BOSCH MUM9BX5S65 Optimum &#43; Zamów z DOSTAWĄ JUTRO! &#43; DARMOWY TRANSPORT!, kolor srebrny"
                         src="http://offers.gallery/p-1d-ea-1dea070b6aba94bbdfc11d80263673f1500x500/robot-planetarny-bosch-mum9bx5s65-optimum-43-zamw-z-dostaw-jutro-43-darmowy-transport-kolor-srebrny.jpg"/>
                </div>
            </a>
            <a href="/produkt-roboty-kuchenne/robot-planetarny-bosch-mum9bx5s65-optimum-zamow-z-dostawa-jutro-darmowy-transport.html">
                <h5 class="title">Robot planetarny BOSCH MUM9BX5S65 Optimum &#43; Zamów z DOSTAWĄ JUTRO! &#43; DARMOWY TRANSPORT!, kolor srebrny</h5>
            </a>

            <div class="product-details-popup text-center">
                                <a href="/produkt-roboty-kuchenne/robot-planetarny-bosch-mum9bx5s65-optimum-zamow-z-dostawa-jutro-darmowy-transport.html" data-container="body" data-placement="left" data-toggle="tooltip">
                    <i class="fa fa-align-justify"></i>
                    <div class="tooltip_title_wrapper hidden">
                        <p>Nowy robot kuchenny OptiMUM: wykwintny design, zintegrowana waga kuchenna, automatyczne programy czujnik Control Plus oraz silnik o mocy 1500 W nadzwyczajne rezultaty. Stanowczo praktyczne...</p>

                    </div>
                </a>
                
                                                            </div>
            <a href="/produkt-roboty-kuchenne/robot-planetarny-bosch-mum9bx5s65-optimum-zamow-z-dostawa-jutro-darmowy-transport.html">
                <div class="row">
                    <div class="col-xs-12 text-center">
                        <span class="price lead">od 3 649,00 PLN</span>
                            <span class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty                                <i class="fa fa-angle-right"></i>
                            </span>
                    </div>
                </div>
            </a>
        </div>
    </div>
</div>                                <div>
    <div class="col-xs-12 product-wrapper-grid">
        <div class="product normal">
            <a href="/produkt-roboty-kuchenne/bosch-mum58020.html">
                <div class="image">
                    <img class="img-responsive" title="Bosch mum58020"
                         src="http://offers.gallery/p-1c-9d-1c9d446618b85a20e13e31c2f6c78be9500x500/bosch-mum58020.jpg"/>
                </div>
            </a>
            <a href="/produkt-roboty-kuchenne/bosch-mum58020.html">
                <h5 class="title">Bosch mum58020</h5>
            </a>

            <div class="product-details-popup text-center">
                                <a href="/produkt-roboty-kuchenne/bosch-mum58020.html" data-container="body" data-placement="left" data-toggle="tooltip">
                    <i class="fa fa-align-justify"></i>
                    <div class="tooltip_title_wrapper hidden">
                        <p>właściwości uzupełniające: łagodny rozbiegotwór w pokrywie do napełniania dodatkamischowek na przewód właściwości dopełniające: schowek na przewódotwór w pokrywie do napełniania dodatkamiłagodny...</p>

                    </div>
                </a>
                
                                                            </div>
            <a href="/produkt-roboty-kuchenne/bosch-mum58020.html">
                <div class="row">
                    <div class="col-xs-12 text-center">
                        <span class="price lead">od 1 002,60 PLN</span>
                            <span class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty                                <i class="fa fa-angle-right"></i>
                            </span>
                    </div>
                </div>
            </a>
        </div>
    </div>
</div>                                <div>
    <div class="col-xs-12 product-wrapper-grid">
        <div class="product normal">
            <a href="/produkt-roboty-kuchenne/robot-kuchenny-bosch-kitchen-machine-bosch-mum-58l20-wh-mum58l20-darmowy-odbior-w-19-miastach.html">
                <div class="image">
                    <img class="img-responsive" title="Robot kuchenny kitchen machine bosch mum 58l20 wh - mum58l20 darmowy odbiór w 19 miastach! marki Bosch"
                         src="http://offers.gallery/p-e5-99-e5999fbd81fade75df258b5c223c7290500x500/robot-kuchenny-kitchen-machine-bosch-mum-58l20-wh-mum58l20-darmowy-odbir-w-19-miastach-marki-bosch.jpg"/>
                </div>
            </a>
            <a href="/produkt-roboty-kuchenne/robot-kuchenny-bosch-kitchen-machine-bosch-mum-58l20-wh-mum58l20-darmowy-odbior-w-19-miastach.html">
                <h5 class="title">Robot kuchenny kitchen machine bosch mum 58l20 wh - mum58l20 darmowy odbiór w 19 miastach! marki Bosch</h5>
            </a>

            <div class="product-details-popup text-center">
                                <a href="/produkt-roboty-kuchenne/robot-kuchenny-bosch-kitchen-machine-bosch-mum-58l20-wh-mum58l20-darmowy-odbior-w-19-miastach.html" data-container="body" data-placement="left" data-toggle="tooltip">
                    <i class="fa fa-align-justify"></i>
                    <div class="tooltip_title_wrapper hidden">
                        <p>Robot kuchenny MUM 5 firmy Bosch pozwoli Ci nie tylko przygotować genialne potrawy,także cieszyć się wyśmienitą stylistyką. Dzięki szerokiej palecie barw, każdy znajdzie robota MUM 5 dla siebie....</p>

                    </div>
                </a>
                
                                                    <a href="/produkt-roboty-kuchenne/robot-kuchenny-bosch-kitchen-machine-bosch-mum-58l20-wh-mum58l20-darmowy-odbior-w-19-miastach.html" data-container="body" data-placement="left" data-toggle="tooltip">
                        <i class="fa fa-tag"></i>

                        <div class="tooltip_title_wrapper hidden">
                            Na tym produkcie możesz zaoszczędzić aż  11%
                        </div>
                    </a>
                                            </div>
            <a href="/produkt-roboty-kuchenne/robot-kuchenny-bosch-kitchen-machine-bosch-mum-58l20-wh-mum58l20-darmowy-odbior-w-19-miastach.html">
                <div class="row">
                    <div class="col-xs-12 text-center">
                        <span class="price lead">od 1 053,40 PLN</span>
                            <span class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty                                <i class="fa fa-angle-right"></i>
                            </span>
                    </div>
                </div>
            </a>
        </div>
    </div>
</div>                                <div>
    <div class="col-xs-12 product-wrapper-grid">
        <div class="product normal">
            <a href="/produkt-roboty-kuchenne/robot-kuchenny-planetarny-bosch-mums2ew00-700w.html">
                <div class="image">
                    <img class="img-responsive" title="Robot kuchenny planetarny BOSCH MUMS2EW00 700W (4242005252305)"
                         src="http://offers.gallery/p-f0-f3-f0f347c60daf2135f69d67954a4576ea500x500/robot-kuchenny-planetarny-bosch-mums2ew00-700w-4242005252305.jpg"/>
                </div>
            </a>
            <a href="/produkt-roboty-kuchenne/robot-kuchenny-planetarny-bosch-mums2ew00-700w.html">
                <h5 class="title">Robot kuchenny planetarny BOSCH MUMS2EW00 700W (4242005252305)</h5>
            </a>

            <div class="product-details-popup text-center">
                                <a href="/produkt-roboty-kuchenne/robot-kuchenny-planetarny-bosch-mums2ew00-700w.html" data-container="body" data-placement="left" data-toggle="tooltip">
                    <i class="fa fa-align-justify"></i>
                    <div class="tooltip_title_wrapper hidden">
                        <p>Robot planetarny wielofunkcyjny Bosch MUM S2EW40Najbardziej kompaktowy robot kuchenny w ofercie firmy Bosch. Zmieści się bezproblemowo w każdej kuchni. Wszechstronne użycie nowego urządzenia ułatwi...</p>

                    </div>
                </a>
                
                                                    <a href="/produkt-roboty-kuchenne/robot-kuchenny-planetarny-bosch-mums2ew00-700w.html" data-container="body" data-placement="left" data-toggle="tooltip">
                        <i class="fa fa-tag"></i>

                        <div class="tooltip_title_wrapper hidden">
                            Na tym produkcie możesz zaoszczędzić aż  47%
                        </div>
                    </a>
                                            </div>
            <a href="/produkt-roboty-kuchenne/robot-kuchenny-planetarny-bosch-mums2ew00-700w.html">
                <div class="row">
                    <div class="col-xs-12 text-center">
                        <span class="price lead">od 489,00 PLN</span>
                            <span class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty                                <i class="fa fa-angle-right"></i>
                            </span>
                    </div>
                </div>
            </a>
        </div>
    </div>
</div>                                <div>
    <div class="col-xs-12 product-wrapper-grid">
        <div class="product normal">
            <a href="/produkt-roboty-kuchenne/robot-kuchenny-bosch-mum-4875-eu-600w-bialy.html">
                <div class="image">
                    <img class="img-responsive" title="Robot kuchenny mum 4875 eu (600w / biały) marki Bosch"
                         src="http://offers.gallery/p-4f-d6-4fd6137b46ff305ba6bdb4bb07145a6f500x500/robot-kuchenny-mum-4875-eu-600w-biay-marki-bosch.jpg"/>
                </div>
            </a>
            <a href="/produkt-roboty-kuchenne/robot-kuchenny-bosch-mum-4875-eu-600w-bialy.html">
                <h5 class="title">Robot kuchenny mum 4875 eu (600w / biały) marki Bosch</h5>
            </a>

            <div class="product-details-popup text-center">
                                <a href="/produkt-roboty-kuchenne/robot-kuchenny-bosch-mum-4875-eu-600w-bialy.html" data-container="body" data-placement="left" data-toggle="tooltip">
                    <i class="fa fa-align-justify"></i>
                    <div class="tooltip_title_wrapper hidden">
                        <p>W zależności od modelu wielofunkcyjne roboty kuchenne MUM 4 zaopatrzone są w silniki o mocy do 600 W i 4-stopniową regulację prędkości. Z tym wszechstronnym robotem wszystkie dania będą znakomite,...</p>

                    </div>
                </a>
                
                                                    <a href="/produkt-roboty-kuchenne/robot-kuchenny-bosch-mum-4875-eu-600w-bialy.html" data-container="body" data-placement="left" data-toggle="tooltip">
                        <i class="fa fa-tag"></i>

                        <div class="tooltip_title_wrapper hidden">
                            Na tym produkcie możesz zaoszczędzić aż  8%
                        </div>
                    </a>
                                            </div>
            <a href="/produkt-roboty-kuchenne/robot-kuchenny-bosch-mum-4875-eu-600w-bialy.html">
                <div class="row">
                    <div class="col-xs-12 text-center">
                        <span class="price lead">od 649,99 PLN</span>
                            <span class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty                                <i class="fa fa-angle-right"></i>
                            </span>
                    </div>
                </div>
            </a>
        </div>
    </div>
</div>                                <div>
    <div class="col-xs-12 product-wrapper-grid">
        <div class="product normal">
            <a href="/produkt-roboty-kuchenne/robot-kuchenny-bosch-mum58420-1000w.html">
                <div class="image">
                    <img class="img-responsive" title="Bosch Robot kuchenny mum58420 (1000w)... (4242002903866)"
                         src="http://offers.gallery/p-fd-6f-fd6fca8e590ceabbd5f104f6abafb78b500x500/bosch-robot-kuchenny-mum58420-1000w-4242002903866.jpg"/>
                </div>
            </a>
            <a href="/produkt-roboty-kuchenne/robot-kuchenny-bosch-mum58420-1000w.html">
                <h5 class="title">Bosch Robot kuchenny mum58420 (1000w)... (4242002903866)</h5>
            </a>

            <div class="product-details-popup text-center">
                                <a href="/produkt-roboty-kuchenne/robot-kuchenny-bosch-mum58420-1000w.html" data-container="body" data-placement="left" data-toggle="tooltip">
                    <i class="fa fa-align-justify"></i>
                    <div class="tooltip_title_wrapper hidden">
                        <p>Robot kuchenny MUM 5 firmy Bosch pozwoli Ci nie tylko przygotować wyśmienite potrawy,również radować się rewelacyjną stylistyką. Dzięki szerokiej palecie barw, każdy wyszuka robota MUM 5 dla...</p>

                    </div>
                </a>
                
                                                    <a href="/produkt-roboty-kuchenne/robot-kuchenny-bosch-mum58420-1000w.html" data-container="body" data-placement="left" data-toggle="tooltip">
                        <i class="fa fa-tag"></i>

                        <div class="tooltip_title_wrapper hidden">
                            Na tym produkcie możesz zaoszczędzić aż  9%
                        </div>
                    </a>
                                            </div>
            <a href="/produkt-roboty-kuchenne/robot-kuchenny-bosch-mum58420-1000w.html">
                <div class="row">
                    <div class="col-xs-12 text-center">
                        <span class="price lead">od 999,00 PLN</span>
                            <span class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty                                <i class="fa fa-angle-right"></i>
                            </span>
                    </div>
                </div>
            </a>
        </div>
    </div>
</div>                                <div>
    <div class="col-xs-12 product-wrapper-grid">
        <div class="product normal">
            <a href="/produkt-roboty-kuchenne/bosch-mums2vm00.html">
                <div class="image">
                    <img class="img-responsive" title="Bosch MUMS2VM00, MUMS2VM00"
                         src="http://offers.gallery/p-58-d6-58d6824934bfde303f66897490c7122f500x500/bosch-mums2vm00-mums2vm00.jpg"/>
                </div>
            </a>
            <a href="/produkt-roboty-kuchenne/bosch-mums2vm00.html">
                <h5 class="title">Bosch MUMS2VM00, MUMS2VM00</h5>
            </a>

            <div class="product-details-popup text-center">
                                <a href="/produkt-roboty-kuchenne/bosch-mums2vm00.html" data-container="body" data-placement="left" data-toggle="tooltip">
                    <i class="fa fa-align-justify"></i>
                    <div class="tooltip_title_wrapper hidden">
                        <p>najmocniej kompaktowy robot kuchenny w ofercie firmy Bosch. Zmieści się bezproblemowo w każdej kuchni. Wszechstronne wykorzystanie nowego urządzenia ułatwi pracę w kuchni i pomoże wyczarować...</p>

                    </div>
                </a>
                
                                                            </div>
            <a href="/produkt-roboty-kuchenne/bosch-mums2vm00.html">
                <div class="row">
                    <div class="col-xs-12 text-center">
                        <span class="price lead">od 689,00 PLN</span>
                            <span class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty                                <i class="fa fa-angle-right"></i>
                            </span>
                    </div>
                </div>
            </a>
        </div>
    </div>
</div>                                <div>
    <div class="col-xs-12 product-wrapper-grid">
        <div class="product normal">
            <a href="/produkt-roboty-kuchenne/bosch-mcm-4100-natychmiastowa-wysyka-odbir-w-240-sklepach.html">
                <div class="image">
                    <img class="img-responsive" title="BOSCH MCM 4100 - NATYCHMIASTOWA WYSYĹKA. ODBIĂR W 240 SKLEPACH. (4242002542751)"
                         src="http://offers.gallery/p-7c-0b-7c0b5d7cf4761d0efa929be65339091f500x500/bosch-mcm-4100-natychmiastowa-wysyka-odbir-w-240-sklepach-4242002542751.jpg"/>
                </div>
            </a>
            <a href="/produkt-roboty-kuchenne/bosch-mcm-4100-natychmiastowa-wysyka-odbir-w-240-sklepach.html">
                <h5 class="title">BOSCH MCM 4100 - NATYCHMIASTOWA WYSYĹKA. ODBIĂR W 240 SKLEPACH. (4242002542751)</h5>
            </a>

            <div class="product-details-popup text-center">
                                <a href="/produkt-roboty-kuchenne/bosch-mcm-4100-natychmiastowa-wysyka-odbir-w-240-sklepach.html" data-container="body" data-placement="left" data-toggle="tooltip">
                    <i class="fa fa-align-justify"></i>
                    <div class="tooltip_title_wrapper hidden">
                        <p>parametry artykułu: Producent: SIEMENS Szerokość (cm) 59.8 Głębokość (cm) 55 Wysokość (cm) 81.5 Wysokość bez blatu (cm) brak danych Waga (kg) 33 Klasa sprawności energetycznej A&amp;#43; pojemność...</p>

                    </div>
                </a>
                
                                                    <a href="/produkt-roboty-kuchenne/bosch-mcm-4100-natychmiastowa-wysyka-odbir-w-240-sklepach.html" data-container="body" data-placement="left" data-toggle="tooltip">
                        <i class="fa fa-tag"></i>

                        <div class="tooltip_title_wrapper hidden">
                            Na tym produkcie możesz zaoszczędzić aż  12%
                        </div>
                    </a>
                                            </div>
            <a href="/produkt-roboty-kuchenne/bosch-mcm-4100-natychmiastowa-wysyka-odbir-w-240-sklepach.html">
                <div class="row">
                    <div class="col-xs-12 text-center">
                        <span class="price lead">od 399,00 PLN</span>
                            <span class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty                                <i class="fa fa-angle-right"></i>
                            </span>
                    </div>
                </div>
            </a>
        </div>
    </div>
</div>                    </div>
        </div>
    
    <div class="row lower-double products">
        <div class="col-xs-8">
            <h4>Produkty najpopularniejsze w kategorii <a href="http://localhost:8000/kategoria-roboty-kuchenne">Roboty kuchenne</a></h4>
        </div>
        <div class="col-xs-4 text-right">
            <a id="products-top-prev" class="btn btn-sm btn-primary btn-primary-outlined"><i class="fa fa-angle-left"></i></a>
            <a id="products-top-next" class="btn btn-sm btn-primary btn-primary-outlined"><i class="fa fa-angle-right"></i></a>
        </div>
    </div>
    <div class="row">
    <div id="products-top" class=" owl-carousel">
                <div>
    <div class="col-xs-12 product-wrapper-grid">
        <div class="product normal">
            <a href="/produkt-roboty-kuchenne/robot-planetarny-bosch-mum9bx5s65-optimum-zamow-z-dostawa-jutro-darmowy-transport.html">
                <div class="image">
                    <img class="img-responsive" title="Robot planetarny BOSCH MUM9BX5S65 Optimum &#43; Zamów z DOSTAWĄ JUTRO! &#43; DARMOWY TRANSPORT!, kolor srebrny"
                         src="http://offers.gallery/p-1d-ea-1dea070b6aba94bbdfc11d80263673f1500x500/robot-planetarny-bosch-mum9bx5s65-optimum-43-zamw-z-dostaw-jutro-43-darmowy-transport-kolor-srebrny.jpg"/>
                </div>
            </a>
            <a href="/produkt-roboty-kuchenne/robot-planetarny-bosch-mum9bx5s65-optimum-zamow-z-dostawa-jutro-darmowy-transport.html">
                <h5 class="title">Robot planetarny BOSCH MUM9BX5S65 Optimum &#43; Zamów z DOSTAWĄ JUTRO! &#43; DARMOWY TRANSPORT!, kolor srebrny</h5>
            </a>

            <div class="product-details-popup text-center">
                                <a href="/produkt-roboty-kuchenne/robot-planetarny-bosch-mum9bx5s65-optimum-zamow-z-dostawa-jutro-darmowy-transport.html" data-container="body" data-placement="left" data-toggle="tooltip">
                    <i class="fa fa-align-justify"></i>
                    <div class="tooltip_title_wrapper hidden">
                        <p>Nowy robot kuchenny OptiMUM: wysmakowany design, zintegrowana waga kuchenna, automatyczne programy czujka Control Plus, a także silnik o mocy 1500 W wyśmienite rezultaty. Szczególnie praktyczne...</p>

                    </div>
                </a>
                
                                                            </div>
            <a href="/produkt-roboty-kuchenne/robot-planetarny-bosch-mum9bx5s65-optimum-zamow-z-dostawa-jutro-darmowy-transport.html">
                <div class="row">
                    <div class="col-xs-12 text-center">
                        <span class="price lead">od 3 649,00 PLN</span>
                            <span class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty                                <i class="fa fa-angle-right"></i>
                            </span>
                    </div>
                </div>
            </a>
        </div>
    </div>
</div>                <div>
    <div class="col-xs-12 product-wrapper-grid">
        <div class="product normal">
            <a href="/produkt-roboty-kuchenne/kitchenaid-robot-kuchenny-5ksm125ecu-szary.html">
                <div class="image">
                    <img class="img-responsive" title="KitchenAid robot kuchenny 5KSM125ECU, szary (5413184200770)"
                         src="http://offers.gallery/p-d2-e7-d2e7361cfad15b725f9622d22bc36de3500x500/kitchenaid-robot-kuchenny-5ksm125ecu-szary-5413184200770.jpg"/>
                </div>
            </a>
            <a href="/produkt-roboty-kuchenne/kitchenaid-robot-kuchenny-5ksm125ecu-szary.html">
                <h5 class="title">KitchenAid robot kuchenny 5KSM125ECU, szary (5413184200770)</h5>
            </a>

            <div class="product-details-popup text-center">
                                <a href="/produkt-roboty-kuchenne/kitchenaid-robot-kuchenny-5ksm125ecu-szary.html" data-container="body" data-placement="left" data-toggle="tooltip">
                    <i class="fa fa-align-justify"></i>
                    <div class="tooltip_title_wrapper hidden">
                        <p>Mikser planetarny KitchenAid Artisan 5 5KSM125EOB Opływowy zarys miksera cechuje elegancja, łatwość utrzymania w czystości, stanowczo prosta obsługa. Bezpośredni napęd jest bezusterkowy i...</p>

                    </div>
                </a>
                
                                                    <a href="/produkt-roboty-kuchenne/kitchenaid-robot-kuchenny-5ksm125ecu-szary.html" data-container="body" data-placement="left" data-toggle="tooltip">
                        <i class="fa fa-tag"></i>

                        <div class="tooltip_title_wrapper hidden">
                            Na tym produkcie możesz zaoszczędzić aż  27%
                        </div>
                    </a>
                                            </div>
            <a href="/produkt-roboty-kuchenne/kitchenaid-robot-kuchenny-5ksm125ecu-szary.html">
                <div class="row">
                    <div class="col-xs-12 text-center">
                        <span class="price lead">od 2 469,00 PLN</span>
                            <span class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty                                <i class="fa fa-angle-right"></i>
                            </span>
                    </div>
                </div>
            </a>
        </div>
    </div>
</div>                <div>
    <div class="col-xs-12 product-wrapper-grid">
        <div class="product normal">
            <a href="/produkt-roboty-kuchenne/bosch-robot-kuchenny-mum9b34s27.html">
                <div class="image">
                    <img class="img-responsive" title="robot kuchenny mum9b34s27 marki Bosch"
                         src="http://offers.gallery/p-fa-78-fa78dd4f8739127edf3ed13855616708500x500/robot-kuchenny-mum9b34s27-marki-bosch.jpg"/>
                </div>
            </a>
            <a href="/produkt-roboty-kuchenne/bosch-robot-kuchenny-mum9b34s27.html">
                <h5 class="title">robot kuchenny mum9b34s27 marki Bosch</h5>
            </a>

            <div class="product-details-popup text-center">
                                <a href="/produkt-roboty-kuchenne/bosch-robot-kuchenny-mum9b34s27.html" data-container="body" data-placement="left" data-toggle="tooltip">
                    <i class="fa fa-align-justify"></i>
                    <div class="tooltip_title_wrapper hidden">
                        <p>Robot kuchenny OptiMUM jest automatycznie nastawiony na wyśmienity efekt. Produktywny silnik, wysokiej jakości metalowa pokrywa, nad wyraz wielka misa ze stali szlachetnej o obszerności 5,5 l i...</p>

                    </div>
                </a>
                
                                                            </div>
            <a href="/produkt-roboty-kuchenne/bosch-robot-kuchenny-mum9b34s27.html">
                <div class="row">
                    <div class="col-xs-12 text-center">
                        <span class="price lead">od 2 239,00 PLN</span>
                            <span class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty                                <i class="fa fa-angle-right"></i>
                            </span>
                    </div>
                </div>
            </a>
        </div>
    </div>
</div>                <div>
    <div class="col-xs-12 product-wrapper-grid">
        <div class="product normal">
            <a href="/produkt-roboty-kuchenne/robot-wielofunkcyjny-kenwood-kcl95-004si-cooking-chef-xl-wifi-1500-w-z-wbudowana-waga-i-funkcja-gotowania.html">
                <div class="image">
                    <img class="img-responsive" title="Robot wielofunkcyjny KENWOOD KCL95.004SI Cooking Chef XL (WiFi) 1500 W z wbudowaną wagą i funkcją gotowania, KCL95.004SI"
                         src="http://offers.gallery/p-c9-e7-c9e72c9efdd90751bd4ec966ec78beaf500x500/robot-wielofunkcyjny-kenwood-kcl95004si-cooking-chef-xl-wifi-1500-w-z-wbudowan-wag-i-funkcj-gotowania-kcl95004si.jpg"/>
                </div>
            </a>
            <a href="/produkt-roboty-kuchenne/robot-wielofunkcyjny-kenwood-kcl95-004si-cooking-chef-xl-wifi-1500-w-z-wbudowana-waga-i-funkcja-gotowania.html">
                <h5 class="title">Robot wielofunkcyjny KENWOOD KCL95.004SI Cooking Chef XL (WiFi) 1500 W z wbudowaną wagą i funkcją gotowania, KCL95.004SI</h5>
            </a>

            <div class="product-details-popup text-center">
                                <a href="/produkt-roboty-kuchenne/robot-wielofunkcyjny-kenwood-kcl95-004si-cooking-chef-xl-wifi-1500-w-z-wbudowana-waga-i-funkcja-gotowania.html" data-container="body" data-placement="left" data-toggle="tooltip">
                    <i class="fa fa-align-justify"></i>
                    <div class="tooltip_title_wrapper hidden">
                        <p>cooking chef xl kcl95.004si gotowanie indukcyjne w zakresie 20-180 poziomów zastosowana waga z dokłądnością do 1g łączność z bezpłatną aplikacją kenwood world 11 samoczynnych programów 3 mieszadła...</p>

                    </div>
                </a>
                
                                                            </div>
            <a href="/produkt-roboty-kuchenne/robot-wielofunkcyjny-kenwood-kcl95-004si-cooking-chef-xl-wifi-1500-w-z-wbudowana-waga-i-funkcja-gotowania.html">
                <div class="row">
                    <div class="col-xs-12 text-center">
                        <span class="price lead">od 4 599,00 PLN</span>
                            <span class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty                                <i class="fa fa-angle-right"></i>
                            </span>
                    </div>
                </div>
            </a>
        </div>
    </div>
</div>                <div>
    <div class="col-xs-12 product-wrapper-grid">
        <div class="product normal">
            <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253DgLMaZbBG9g3mmNRpIMY8gAW4rSTD659cG6SLMviizBlJp7pcld7bwrKQ%252AmMH2hNTydVkSLTZhCRn1uQZOWfKtsF7CtfqQjtcV6FTplFxDZl3rBLAgGQHkcR1EcLoTHcg_P.API_5_10_viewsdesc" rel="nofollow">
                <div class="image">
                    <img class="img-responsive" title="Kenwood titanium chef baker kvc85.124si (5011423002323)"
                         src="http://offers.gallery/p-25-f8-25f8bdc3e75d2d3be4576ca2940c3b9f500x500/kenwood-titanium-chef-baker-kvc85124si-5011423002323.jpg"/>
                </div>
            </a>
            <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253DgLMaZbBG9g3mmNRpIMY8gAW4rSTD659cG6SLMviizBlJp7pcld7bwrKQ%252AmMH2hNTydVkSLTZhCRn1uQZOWfKtsF7CtfqQjtcV6FTplFxDZl3rBLAgGQHkcR1EcLoTHcg_P.API_5_10_viewsdesc" rel="nofollow">
                <h5 class="title">Kenwood titanium chef baker kvc85.124si (5011423002323)</h5>
            </a>

            <div class="product-details-popup text-center">
                                <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253DgLMaZbBG9g3mmNRpIMY8gAW4rSTD659cG6SLMviizBlJp7pcld7bwrKQ%252AmMH2hNTydVkSLTZhCRn1uQZOWfKtsF7CtfqQjtcV6FTplFxDZl3rBLAgGQHkcR1EcLoTHcg_P.API_5_10_viewsdesc" rel="nofollow" data-container="body" data-placement="left" data-toggle="tooltip">
                    <i class="fa fa-align-justify"></i>
                    <div class="tooltip_title_wrapper hidden">
                        <p>robot planetarny kenwood kvc85.124si titanium chef baker wszechstronny robot planetarny titanium chef baker to inspirująca przepustka do świata genialnych wypieków. Zaopatrzony w konkretny silnik,...</p>

                    </div>
                </a>
                
                                                                    <a href="/produkt-roboty-kuchenne/kenwood-titanium-chef-baker-kvc85-124si.html"><i class="fa fa-link"></i></a>
                            </div>
            <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253DgLMaZbBG9g3mmNRpIMY8gAW4rSTD659cG6SLMviizBlJp7pcld7bwrKQ%252AmMH2hNTydVkSLTZhCRn1uQZOWfKtsF7CtfqQjtcV6FTplFxDZl3rBLAgGQHkcR1EcLoTHcg_P.API_5_10_viewsdesc" rel="nofollow">
                <div class="row">
                    <div class="col-xs-12 text-center">
                        <span class="price lead">2 699,00 PLN</span>
                            <span class="btn btn-success btn-success-outlined btn-icon-right">Zobacz w sklepie                                <i class="fa fa-angle-right"></i>
                            </span>
                    </div>
                </div>
            </a>
        </div>
    </div>
</div>                <div>
    <div class="col-xs-12 product-wrapper-grid">
        <div class="product normal">
            <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253DvrTk7JQQbPJi169B8WHkvXRqbwbSa%252AETEH1NOtq3TJOFyoWzjpCh6li4lQ76M0zHApuSlF20SJOfH%2524ge8SphlimPrK91PdtW5H26C28hLpoU3FQ3wMTOHzfrCbC%2524D9Gm_P.API_6_10_viewsdesc" rel="nofollow">
                <div class="image">
                    <img class="img-responsive" title="Robot BOSCH MUM 54251, MUM 54251"
                         src="http://offers.gallery/p-50-b5-50b518b9d3811f51847e4bc18590b71a500x500/robot-bosch-mum-54251-mum-54251.jpg"/>
                </div>
            </a>
            <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253DvrTk7JQQbPJi169B8WHkvXRqbwbSa%252AETEH1NOtq3TJOFyoWzjpCh6li4lQ76M0zHApuSlF20SJOfH%2524ge8SphlimPrK91PdtW5H26C28hLpoU3FQ3wMTOHzfrCbC%2524D9Gm_P.API_6_10_viewsdesc" rel="nofollow">
                <h5 class="title">Robot BOSCH MUM 54251, MUM 54251</h5>
            </a>

            <div class="product-details-popup text-center">
                                <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253DvrTk7JQQbPJi169B8WHkvXRqbwbSa%252AETEH1NOtq3TJOFyoWzjpCh6li4lQ76M0zHApuSlF20SJOfH%2524ge8SphlimPrK91PdtW5H26C28hLpoU3FQ3wMTOHzfrCbC%2524D9Gm_P.API_6_10_viewsdesc" rel="nofollow" data-container="body" data-placement="left" data-toggle="tooltip">
                    <i class="fa fa-align-justify"></i>
                    <div class="tooltip_title_wrapper hidden">
                        <p>właściwości dopełniające: schowek na akcesoria Długość kabla zasilającego: 1,1 mFunkcje użytkowe: ubijaniewyrabianie ciastamiksowaniewyciskaniekrojenieścieranieucieranie Funkcje użytkowe:...</p>

                    </div>
                </a>
                
                                                                    <a href="/produkt-roboty-kuchenne/robot-bosch-mum-54251.html"><i class="fa fa-link"></i></a>
                            </div>
            <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253DvrTk7JQQbPJi169B8WHkvXRqbwbSa%252AETEH1NOtq3TJOFyoWzjpCh6li4lQ76M0zHApuSlF20SJOfH%2524ge8SphlimPrK91PdtW5H26C28hLpoU3FQ3wMTOHzfrCbC%2524D9Gm_P.API_6_10_viewsdesc" rel="nofollow">
                <div class="row">
                    <div class="col-xs-12 text-center">
                        <span class="price lead">1 229,00 PLN</span>
                            <span class="btn btn-success btn-success-outlined btn-icon-right">Zobacz w sklepie                                <i class="fa fa-angle-right"></i>
                            </span>
                    </div>
                </div>
            </a>
        </div>
    </div>
</div>                <div>
    <div class="col-xs-12 product-wrapper-grid">
        <div class="product normal">
            <a href="/produkt-roboty-kuchenne/tefal-robot-kuchenny-qb813d38-masterchef-grande.html">
                <div class="image">
                    <img class="img-responsive" title="robot kuchenny qb813d38 masterchef grande marki Tefal"
                         src="http://offers.gallery/p-af-c5-afc538c8e75c393951ffc8ef1c19f690500x500/robot-kuchenny-qb813d38-masterchef-grande-marki-tefal.jpg"/>
                </div>
            </a>
            <a href="/produkt-roboty-kuchenne/tefal-robot-kuchenny-qb813d38-masterchef-grande.html">
                <h5 class="title">robot kuchenny qb813d38 masterchef grande marki Tefal</h5>
            </a>

            <div class="product-details-popup text-center">
                                <a href="/produkt-roboty-kuchenne/tefal-robot-kuchenny-qb813d38-masterchef-grande.html" data-container="body" data-placement="left" data-toggle="tooltip">
                    <i class="fa fa-align-justify"></i>
                    <div class="tooltip_title_wrapper hidden">
                        <p>Blender kielichowy:tak;Dominujący odcień obudowy:srebrny;Gotowanie:nie;Smażenie:nie;Funkcje:zagniatanie ciasta, ubijanie piany, miksowanie, mielenie, tarcie na wiórki, krojenie w plastry, krojenie...</p>

                    </div>
                </a>
                
                                                    <a href="/produkt-roboty-kuchenne/tefal-robot-kuchenny-qb813d38-masterchef-grande.html" data-container="body" data-placement="left" data-toggle="tooltip">
                        <i class="fa fa-tag"></i>

                        <div class="tooltip_title_wrapper hidden">
                            Na tym produkcie możesz zaoszczędzić aż  14%
                        </div>
                    </a>
                                            </div>
            <a href="/produkt-roboty-kuchenne/tefal-robot-kuchenny-qb813d38-masterchef-grande.html">
                <div class="row">
                    <div class="col-xs-12 text-center">
                        <span class="price lead">od 2 499,00 PLN</span>
                            <span class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty                                <i class="fa fa-angle-right"></i>
                            </span>
                    </div>
                </div>
            </a>
        </div>
    </div>
</div>                <div>
    <div class="col-xs-12 product-wrapper-grid">
        <div class="product normal">
            <a href="/produkt-roboty-kuchenne/ariete-1588-03-bezowy.html">
                <div class="image">
                    <img class="img-responsive" title="ARIETE 1588 03 Beżowy (8003705115996)"
                         src="http://offers.gallery/p-3b-ab-3babe1a879b89659a89c443e7e981bca500x500/ariete-1588-03-beowy-8003705115996.jpg"/>
                </div>
            </a>
            <a href="/produkt-roboty-kuchenne/ariete-1588-03-bezowy.html">
                <h5 class="title">ARIETE 1588 03 Beżowy (8003705115996)</h5>
            </a>

            <div class="product-details-popup text-center">
                                <a href="/produkt-roboty-kuchenne/ariete-1588-03-bezowy.html" data-container="body" data-placement="left" data-toggle="tooltip">
                    <i class="fa fa-align-justify"></i>
                    <div class="tooltip_title_wrapper hidden">
                        <p>Robot planetarny Ariete 1588/03 Vintage 2400W 5,5lRobot planetarny w stylu Vintage producenta Ariete to wyśmienity dobór dla osób, które szukają użytecznego i estetycznego rozwiązania dla swojego...</p>

                    </div>
                </a>
                
                                                    <a href="/produkt-roboty-kuchenne/ariete-1588-03-bezowy.html" data-container="body" data-placement="left" data-toggle="tooltip">
                        <i class="fa fa-tag"></i>

                        <div class="tooltip_title_wrapper hidden">
                            Na tym produkcie możesz zaoszczędzić aż  6%
                        </div>
                    </a>
                                            </div>
            <a href="/produkt-roboty-kuchenne/ariete-1588-03-bezowy.html">
                <div class="row">
                    <div class="col-xs-12 text-center">
                        <span class="price lead">od 589,99 PLN</span>
                            <span class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty                                <i class="fa fa-angle-right"></i>
                            </span>
                    </div>
                </div>
            </a>
        </div>
    </div>
</div>                <div>
    <div class="col-xs-12 product-wrapper-grid">
        <div class="product normal">
            <a href="/produkt-roboty-kuchenne/robot-kuchenny-kitchenaid-5ksm175-2-kolory.html">
                <div class="image">
                    <img class="img-responsive" title="Kitchenaid Robot kuchenny 5ksm175 2 kolory"
                         src="http://offers.gallery/p-68-06-6806b6c2d92e75ecd0e052904cbb362f500x500/kitchenaid-robot-kuchenny-5ksm175-2-kolory.jpg"/>
                </div>
            </a>
            <a href="/produkt-roboty-kuchenne/robot-kuchenny-kitchenaid-5ksm175-2-kolory.html">
                <h5 class="title">Kitchenaid Robot kuchenny 5ksm175 2 kolory</h5>
            </a>

            <div class="product-details-popup text-center">
                                <a href="/produkt-roboty-kuchenne/robot-kuchenny-kitchenaid-5ksm175-2-kolory.html" data-container="body" data-placement="left" data-toggle="tooltip">
                    <i class="fa fa-align-justify"></i>
                    <div class="tooltip_title_wrapper hidden">
                        <p>Blender kielichowy:nie;Długość przewodu:1,06 m;Dominujący barwa pokrywy:niebieski;Gotowanie:nie;Smażenie:nie;Funkcje:zagniatanie ciasta, ubijanie piany, mieszanie;Cięcie w kostkę:nie;Funkcje...</p>

                    </div>
                </a>
                
                                                            </div>
            <a href="/produkt-roboty-kuchenne/robot-kuchenny-kitchenaid-5ksm175-2-kolory.html">
                <div class="row">
                    <div class="col-xs-12 text-center">
                        <span class="price lead">od 3 749,00 PLN</span>
                            <span class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty                                <i class="fa fa-angle-right"></i>
                            </span>
                    </div>
                </div>
            </a>
        </div>
    </div>
</div>                <div>
    <div class="col-xs-12 product-wrapper-grid">
        <div class="product normal">
            <a href="/produkt-roboty-kuchenne/robot-planetarny-koliber-robomax-x-1800-w.html">
                <div class="image">
                    <img class="img-responsive" title="Robot planetarny KOLIBER Robomax X-1800-W, kolor srebrny"
                         src="http://offers.gallery/p-77-fa-77fac80ad4e29cb9273433bbd2b52363500x500/robot-planetarny-koliber-robomax-x-1800-w-kolor-srebrny.jpg"/>
                </div>
            </a>
            <a href="/produkt-roboty-kuchenne/robot-planetarny-koliber-robomax-x-1800-w.html">
                <h5 class="title">Robot planetarny KOLIBER Robomax X-1800-W, kolor srebrny</h5>
            </a>

            <div class="product-details-popup text-center">
                                <a href="/produkt-roboty-kuchenne/robot-planetarny-koliber-robomax-x-1800-w.html" data-container="body" data-placement="left" data-toggle="tooltip">
                    <i class="fa fa-align-justify"></i>
                    <div class="tooltip_title_wrapper hidden">
                        <p>solidny i sprawny robot kuchenny ROBOMAX X 1800W renomowanej firmy Koliber HOME&amp;amp;COOK. Wspaniale nadaje się do mieszania, zagniatania i ubijania produktów do każdego rodzaju ciasta....</p>

                    </div>
                </a>
                
                                                            </div>
            <a href="/produkt-roboty-kuchenne/robot-planetarny-koliber-robomax-x-1800-w.html">
                <div class="row">
                    <div class="col-xs-12 text-center">
                        <span class="price lead">od 399,00 PLN</span>
                            <span class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty                                <i class="fa fa-angle-right"></i>
                            </span>
                    </div>
                </div>
            </a>
        </div>
    </div>
</div>        </div>
    </div>

    </div>

    <footer>
        <div class="container">
            <div class="row">
                <div class="col-md-5">
                    <h5>O nas</h5>
                    <p>Porownywarka.co to serwis pozwalający na porównanie cen w najlepszych sklepach internetowych w
                        Polsce. Został stworzony, by ułatwić użytkownikom Internetu znalezienie najniższych cen i
                        wygodne e-zakupy. Porównaj oferty kilku tysięcy sklepów internetowych.</p>
                </div>
                <div class="col-md-7">
                    <h5>Dla sklepów</h5>
                    <p>Chcesz, aby znalazła się tutaj również oferta Twojego sklepu? Operatorem danych dla
                        serwisu Porownywarka.co jest Nokaut.pl, porównywarka cen i sieć reklamowa odwiedzana przez kilka
                        milionów użytkowników każdego miesiąca. Skontaktuj się skorzystaj z kontakt@nokaut.pl.</p>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    Copyright © 2023. Wszystkie prawa zastrzeżone.
                    <a href="http://localhost:8000/mapa-kategorii">Mapa kategorii</a>
                </div>
            </div>
        </div>
    </footer>

    <div id="modal-preloader" class="modal-backdrop fade in text-center" style="display:none;padding-top:100px;"><img
                src="/images/progress-circle-info.svg"></div>
        <script src="/js/bootstrap.min.js"></script>
    <script src="/js/owl.carousel.min.js"></script>
    <script src="/js/jquery.bxslider.min.js"></script>
    <script src="/js/jquery.growl.js" type="text/javascript"></script>
    <script src="/js/common.js"></script>


    <script src="/js/isotope.pkgd.min.js"></script>

    <script type="text/javascript">
        $('#offersContainer').isotope({
            itemSelector : '.offer',
            layoutMode : 'vertical',
            getSortData : {
                price : function ( $elem ) {
                    return parseFloat($($elem).attr('data-price'));
                }
            }
        });

        $('#sortOffersSelect a').click(function(){
            // get href attribute, minus the '#'
            var sortName = $(this).attr('href').slice(1);
            switch (sortName) {
                case 'domyslne':
                    $('#offersContainer').isotope({ sortBy : 'original-order' });
                    break;
                case 'najtansze':
                    $('#offersContainer').isotope({
                        sortBy : 'price',
                        sortAscending : true
                    });
                    break;
                case 'najdrozsze':
                    $('#offersContainer').isotope({
                        sortBy : 'price',
                        sortAscending : false
                    });
                    break;
            }
            $('#sortOffersSelect li').removeClass('active');
            $(this).parent().addClass('active');
            $('#sortOffersSelect').dropdown('toggle');
            return false;
        });


    </script>

        <script type="text/javascript">

        $('.product-star').css('cursor', 'pointer');
        $('.product-star')
        .mouseover(function(e) {
            var rating = calculateRating(e, this);
            selectStars(rating);
        }).mouseout(function(e) {
            var currentRating = $(this).attr('data-star-current');
            selectStars(currentRating);
        }).click(function(e) {
            sendPostWithRating(e, this);
        });

        function calculateRating(e, elementRating) {
            return $(elementRating).attr('data-star-nr');
        }

        function sendPostWithRating(e, elementStars) {
            var rating = calculateRating(e, elementStars);
            $.post("http://localhost:8000/daja_ocene",
                    {
                        productId: '599ed5af8e441a2faeaf9c1d',
                        rating: rating
                    })
                    .done(function (data) {
                        if (data != -1) {
                            selectStars(Math.round(data));
                        }
                        $(".product-star").unbind().css('cursor','default');
                        $.growl.notice({ title: "", message: "Dziękujemy za Twój głos. Niebawem zostanie uwzględniony w całkowitej ocenie produktu." });
                    });
        }

        function selectStars(countSelectedStars) {
            $('.product-star').removeClass('fa-star','silver');
            $('.product-star').addClass('fa-star-o','silver');
            for(var i=1; i<=countSelectedStars; ++i) {
                $('.product-star[data-star-nr='+i+']').removeClass('fa-star-o','silver');
                $('.product-star[data-star-nr='+i+']').addClass('fa-star','silver');
            }
        }
    </script>
    </body>
</html>
";s:10:" * version";s:3:"1.0";s:13:" * statusCode";i:200;s:13:" * statusText";s:2:"OK";s:10:" * charset";N;}