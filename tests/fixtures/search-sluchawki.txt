O:41:"Symfony\Component\HttpFoundation\Response":6:{s:7:"headers";O:50:"Symfony\Component\HttpFoundation\ResponseHeaderBag":5:{s:23:" * computedCacheControl";a:2:{s:8:"no-cache";b:1;s:7:"private";b:1;}s:10:" * cookies";a:0:{}s:14:" * headerNames";a:2:{s:13:"cache-control";s:13:"Cache-Control";s:4:"date";s:4:"Date";}s:10:" * headers";a:2:{s:13:"cache-control";a:1:{i:0;s:17:"no-cache, private";}s:4:"date";a:1:{i:0;s:29:"Fri, 24 Mar 2023 05:45:14 GMT";}}s:15:" * cacheControl";a:0:{}}s:10:" * content";s:150492:"<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8" />
    <title>    słuchawki - Porownywarka.co</title>
    <meta name="description" content="" />
            <meta name="viewport" content="width=device-width, initial-scale=1">


    <link rel="canonical" href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki.html"/>
        <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="/css/bootstrap.css" media="screen">
    <link rel="stylesheet" href="/css/owl.carousel.css">
    <link rel="stylesheet" href="/css/jquery.bxslider.css">
    <link rel="stylesheet" href="/css/theme-bootstrap.css">
    <link rel="stylesheet" href="/css/ecommerce-theme-bootstrap.css">
    <link href="/css/jquery.growl.css" rel="stylesheet" type="text/css"/>
    <link href="//maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css" rel="stylesheet">
            <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>

    <!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->

    <script type="text/javascript">
        function search() {
            var url = 'http://localhost:8000/produkty-produkt:_PHRASE_VALUE_.html';
            var phrase = $('#phraseInput').val().trim().toLowerCase();
            if (!phrase) {
                alert('Pole do wyszukiwania nie może być puste');
                return false;
            }
            phrase = phrase.replace(/\s+/g, '-');
            location.href = url.replace('_PHRASE_VALUE_', encodeURIComponent(phrase));
            return false;
        }

        $(function () {
            $('#searchFrom').on('submit', function () {
                return search()
            });
            $('#buttonSearch').on('click', function () {
                return search()
            });
        });
    </script>
    
    <script type="text/javascript">
        function filterRanges(template, inputFromId, inputToId) {
            var valueFrom = $('#' + inputFromId).val();
            var valueTo = $('#' + inputToId).val();
            if (!valueFrom && !valueTo) {
                alert('Proszę podać wartości w polach koło przycisku "zastosuj"');
                return;
            }
            var url = template.replace('%25s~%25s', parseRangeValue(valueFrom) + '~' + parseRangeValue(valueTo));
            document.location.href = url;
        }

        function parseRangeValue(inputValue) {
            var value = parseFloat(inputValue);
            return value ? value : '';
        }
    </script>

</head>
<body>
    <div class="navbar navbar-default navbar-fixed-top yamm">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse"
                        data-target=".navbar-responsive-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand" href="/">Porownywarka.co</a>
            </div>
            <div class="navbar-collapse collapse navbar-responsive-collapse">

                <ul class="nav navbar-nav">
            <li class="dropdown yamm-fw ">
            <a href="#" data-toggle="dropdown" class="dropdown-toggle">Kategorie I <b class="caret"></b></a>
            <ul class="dropdown-menu">
                <li>
                    <div class="row">

                        <div class="col-sm-3">

                            <ul class="dropdown-menu dropdown-menu-inner">
                                <li class="dropdown-header">Kategorie</li>
                                                                    <li><a href="http://localhost:8000/kategoria-muzyka" title="Muzyka">Muzyka</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-filmy" title="Filmy">Filmy</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-fotografia-i-optyka" title="Fotografia i optyka">Fotografia i optyka</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-komputery" title="Komputery">Komputery</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-albumy" title="Albumy">Albumy</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-sprzet-rtv" title="Sprzęt RTV">Sprzęt RTV</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-sprzet-agd" title="Sprzęt AGD">Sprzęt AGD</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-gry-i-konsole" title="Gry i konsole">Gry i konsole</a></li>
                                                            </ul>

                        </div>
                                                    <div class="col-sm-9">

                                <div class="row">
                                    <div class="col-sm-12 col-xs-12">
                                        <span class="dropdown-header dropdown-header-no-list">Popularne produkty</span>
                                    </div>
                                </div>

                                <div class="row">
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-sluchawki/sony-mdr-rf895.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-fe-57-fe5750ad73040ae221f65cfbcaae163a90x90/sony-mdr-rf895.jpg" />
                                                    </div>
                                                    <span class="price">od 379,04 PLN</span>
                                                    <h5 class="title">Sony MDR-RF895</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-roboty-kuchenne/robot-planetarny-bosch-mum9bx5s65-optimum-zamow-z-dostawa-jutro-darmowy-transport.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-1d-ea-1dea070b6aba94bbdfc11d80263673f190x90/robot-planetarny-bosch-mum9bx5s65-optimum-43-zamw-z-dostaw-jutro-43-darmowy-transport-kolor-srebrny.jpg" />
                                                    </div>
                                                    <span class="price">od 3649,00 PLN</span>
                                                    <h5 class="title">Robot planetarny BOSCH MUM9BX5S65 Optimum &#43; Zamów z DOSTAWĄ JUTRO! &#43; DARMOWY TRANSPORT!, kolor srebrny</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-sluchawki/jbl-t225.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-3f-41-3f41a1801783ad7c74f0f9443a3c28f390x90/jbl-t225.jpg" />
                                                    </div>
                                                    <span class="price">od 386,31 PLN</span>
                                                    <h5 class="title">JBL T225</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-sluchawki/beats-by-dr-dre-studio-3.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-0a-e8-0ae87a96abbc3ccf37d1f3a05f17d3a490x90/beats-by-dr-dre-studio-3.jpg" />
                                                    </div>
                                                    <span class="price">od 1299,00 PLN</span>
                                                    <h5 class="title">Beats by Dr. Dre Studio 3</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-sluchawki/sony-wf-1000.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-6d-d6-6dd67f7b817841b6e3cb91c81ec30c7390x90/sony-wf-1000.jpg" />
                                                    </div>
                                                    <span class="price">od 839,00 PLN</span>
                                                    <h5 class="title">Sony WF-1000</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-sluchawki/xiaomi-redmi-buds-3.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-cd-ad-cdad5f581d0024667108791ce91b13f490x90/xiaomi-redmi-buds-3.jpg" />
                                                    </div>
                                                    <span class="price">od 84,99 PLN</span>
                                                    <h5 class="title">Xiaomi Redmi Buds 3</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                    </div>

                            </div>
                                            </div>
                </li>
            </ul>
        </li>
                <li class="dropdown yamm-fw ">
            <a href="#" data-toggle="dropdown" class="dropdown-toggle">Kategorie II <b class="caret"></b></a>
            <ul class="dropdown-menu">
                <li>
                    <div class="row">

                        <div class="col-sm-3">

                            <ul class="dropdown-menu dropdown-menu-inner">
                                <li class="dropdown-header">Kategorie</li>
                                                                    <li><a href="http://localhost:8000/kategoria-inne" title="Inne">Inne</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-telefony-i-akcesoria" title="Telefony i akcesoria">Telefony i akcesoria</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-motoryzacja" title="Motoryzacja">Motoryzacja</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-zdrowie" title="Zdrowie">Zdrowie</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-moda-i-styl" title="Moda i styl">Moda i styl</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-sport-i-hobby" title="Sport i hobby">Sport i hobby</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-delikatesy" title="Delikatesy">Delikatesy</a></li>
                                                            </ul>

                        </div>
                                                    <div class="col-sm-9">

                                <div class="row">
                                    <div class="col-sm-12 col-xs-12">
                                        <span class="dropdown-header dropdown-header-no-list">Popularne produkty</span>
                                    </div>
                                </div>

                                <div class="row">
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-bieznie/bieznia-elektryczna-kinetic-2900.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-9d-14-9d145773c53a6844b286bfb45d1cf8ed90x90/bienia-elektryczna-kinetic-2900-4260495759791.jpg" />
                                                    </div>
                                                    <span class="price">999,00 PLN</span>
                                                    <h5 class="title">Bieżnia elektryczna Kinetic 2900 (4260495759791)</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-telefony-komorkowe/samsung-galaxy-s20-fe-5g-sm-g781.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-39-68-396882215d00a7811b9ab789dab51aa190x90/samsung-galaxy-s20-fe-5g-sm-g781.jpg" />
                                                    </div>
                                                    <span class="price">od 1977,00 PLN</span>
                                                    <h5 class="title">Samsung Galaxy S20 FE 5G SM-G781</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-bieznie/bieznia-elektryczna-kinetic-do-10-km.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-dd-8d-dd8d07585cd08e9442f64a43eb83ac4d90x90/bienia-elektryczna-kinetic-do-10-km-4260495754925.jpg" />
                                                    </div>
                                                    <span class="price">od 799,00 PLN</span>
                                                    <h5 class="title">Bieżnia elektryczna Kinetic do 10 km (4260495754925)</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-telefony-komorkowe/apple-iphone-11-64gb.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-7b-a4-7ba42684bfa28bd9deb05cadfed989db90x90/apple-iphone-11-64gb.jpg" />
                                                    </div>
                                                    <span class="price">od 2040,00 PLN</span>
                                                    <h5 class="title">Apple iPhone 11 64GB</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-telefony-komorkowe/samsung-galaxy-m23.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-4b-93-4b93cf43b244aa554ffb7042ba34860890x90/samsung-galaxy-m23.jpg" />
                                                    </div>
                                                    <span class="price">od 949,00 PLN</span>
                                                    <h5 class="title">Samsung Galaxy M23</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-telefony-komorkowe/samsung-galaxy-a33.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-fa-fc-fafc362d3cbe897af4573106117165db90x90/samsung-galaxy-a33.jpg" />
                                                    </div>
                                                    <span class="price">od 1333,00 PLN</span>
                                                    <h5 class="title">Samsung Galaxy A33</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                    </div>

                            </div>
                                            </div>
                </li>
            </ul>
        </li>
                <li class="dropdown yamm-fw ">
            <a href="#" data-toggle="dropdown" class="dropdown-toggle">Kategorie III <b class="caret"></b></a>
            <ul class="dropdown-menu">
                <li>
                    <div class="row">

                        <div class="col-sm-3">

                            <ul class="dropdown-menu dropdown-menu-inner">
                                <li class="dropdown-header">Kategorie</li>
                                                                    <li><a href="http://localhost:8000/kategoria-dla-dzieci" title="Dla dzieci">Dla dzieci</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-prezenty" title="Prezenty">Prezenty</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-kosmetyki" title="Kosmetyki">Kosmetyki</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-erotyka" title="Erotyka">Erotyka</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-biznes" title="Biznes">Biznes</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-dom-i-ogrod" title="Dom i ogród">Dom i ogród</a></li>
                                                                    <li><a href="http://localhost:8000/kategoria-narzedzia" title="Narzędzia">Narzędzia</a></li>
                                                            </ul>

                        </div>
                                                    <div class="col-sm-9">

                                <div class="row">
                                    <div class="col-sm-12 col-xs-12">
                                        <span class="dropdown-header dropdown-header-no-list">Popularne produkty</span>
                                    </div>
                                </div>

                                <div class="row">
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-lustra-lazienkowe/lustro-lazienkowe-podswietlane-led-80x60cm-73f54d3292c0136242647de5a50201a4.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-d4-db-d4db2393d96f8f5ac49ebca45f3564d890x90/lustro-azienkowe-podwietlane-led-80x60cm-led4-80x60cm.jpg" />
                                                    </div>
                                                    <span class="price">399,00 PLN</span>
                                                    <h5 class="title">Lustro łazienkowe podświetlane led 80x60cm, LED4 80x60cm</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-drzwi-prysznicowe/drzwi-prysznicowe-przesuwne-liniger-d20-premium.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-52-ae-52ae3bbfeafacdf5b16db012181b4c2d90x90/drzwi-prysznicowe-przesuwne-liniger-d20-premium.jpg" />
                                                    </div>
                                                    <span class="price">1309,00 PLN</span>
                                                    <h5 class="title">Drzwi Prysznicowe Przesuwne Liniger D20 PREMIUM</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-pily-lancuchowe/imoum-live-lancuchowa-mini-pila-elektryczna.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-9d-80-9d80cf4079f092f17984b56fb2e1c75e90x90/imoum-live-acuchowa-mini-pia-elektryczna.jpg" />
                                                    </div>
                                                    <span class="price">549,00 PLN</span>
                                                    <h5 class="title">Imoum Live Łańcuchowa mini piła elektryczna</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-pozostale-poza-domem/daszek-zadaszenie-systemowe-drzwi-modern-300x060-a072f751415d59bd5570d3bc2654357b.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-91-6b-916b644d5ac7d82fdb5fa8e158e61ed590x90/metal-gum-daszek-zadaszenie-systemowe-drzwi-modern-300x060.jpg" />
                                                    </div>
                                                    <span class="price">289,00 PLN</span>
                                                    <h5 class="title">Metal-gum Daszek zadaszenie systemowe drzwi modern 300x060</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-wertykulatory/wertykulator-i-aerator-einhell-gc-sa-1231-2w1.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-88-26-8826f253afe94dbc610f62214590675090x90/einhell-wertykulator-i-aerator-gc-sa-1231-2w1.jpg" />
                                                    </div>
                                                    <span class="price">551,99 PLN</span>
                                                    <h5 class="title">Einhell Wertykulator i aerator gc-sa 1231 2w1</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                            <div class="col-md-2 col-xs-4">
                                            <a href="http://localhost:8000/produkt-mapy/tablica-mapa-2x3-officeboard-mapa-administracyjna-polski-102-5x120cm-plyta-magnetyczna-lakierowana-multimediaszkolne-pl-f208f4.html">
                                                <div class="product tiny">
                                                    <div class="image">
                                                        <img class='img-responsive' src="http://offers.gallery/p-2d-31-2d3141b88e0ac962c28f2271532c596c90x90/tablica-mapa-2x3-officeboard-mapa-administracyjna-polski-1025x120cm-pyta-magnetyczna-lakierowana-tmpa2m.jpg" />
                                                    </div>
                                                    <span class="price">361,28 PLN</span>
                                                    <h5 class="title">Tablica mapa 2x3 officeBoard – Mapa administracyjna Polski 102,5x120cm, płyta magnetyczna lakierowana, TMPA2M</h5>
                                                </div>
                                            </a>
                                        </div>
                                                                    </div>

                            </div>
                                            </div>
                </li>
            </ul>
        </li>
    </ul>
                <form id="searchFrom" class="navbar-form navbar-right">
                    <div class="input-group input-group-with-btn">
                        <input id="phraseInput" type="text" class="form-control input-lg"
                               value="słuchawki" placeholder="Szukam...">
                        <span class="input-group-btn">
                  <button id="buttonSearch" class="btn btn-link" type="button"><i class="fa fa-search"></i></button>
                </span>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="container top">

                                    <div class="row">
                    <div class="col-lg-12 col-md-12 col-sm-12">
                        <ul class="breadcrumb">
                            <li><a href="/">Porownywarka.co</a></li>
                                                                                                <li class="active">Szukasz: słuchawki</li>
                                                                                    </ul>
                    </div>
                </div>
                    
        
        <div class="row category">

    <!-- filters -->
    <div class="col-md-3 col-sm-12 category-filters">
        <div class="panel-group" id="accordion">

                        <div class="panel panel-default category-filter">
                <div class="panel-heading">
                    <h4 class="panel-title">
                        <a data-toggle="collapse" href="#collapseCategory" class="category-filter-title collapsed">
                            Kategorie
                            <i class="filter-open fa fa-angle-down"></i>
                            <i class="filter-close fa fa-angle-up"></i>
                        </a>
                    </h4>
                </div>
                <div id="collapseCategory" class="panel-collapse in" style="height: auto;">
                    <div class="panel-body">
                        <ul>
                                                                                                                        <li class="lower-half"><a href="http://localhost:8000/produkty-biznes/produkt:s%25C5%2582uchawki.html">
                                    <span class="badge pull-right">7</span> Biznes</a>
                                </li>
                                                                                                                            <li><a href="http://localhost:8000/produkty-dla-dzieci/produkt:s%25C5%2582uchawki.html">
                                    <span class="badge pull-right">119</span> Dla dzieci</a>
                                </li>
                                                                                                                            <li><a href="http://localhost:8000/produkty-dom-i-ogrod/produkt:s%25C5%2582uchawki.html">
                                    <span class="badge pull-right">748</span> Dom i ogród</a>
                                </li>
                                                                                                                            <li><a href="http://localhost:8000/produkty-gry-i-konsole/produkt:s%25C5%2582uchawki.html">
                                    <span class="badge pull-right">139</span> Gry i konsole</a>
                                </li>
                                                                                                                            <li><a href="http://localhost:8000/produkty-komputery/produkt:s%25C5%2582uchawki.html">
                                    <span class="badge pull-right">55</span> Komputery</a>
                                </li>
                                                                                                                            <li><a href="http://localhost:8000/produkty-moda-i-styl/produkt:s%25C5%2582uchawki.html">
                                    <span class="badge pull-right">29</span> Moda i styl</a>
                                </li>
                                                                                                                            <li><a href="http://localhost:8000/produkty-motoryzacja/produkt:s%25C5%2582uchawki.html">
                                    <span class="badge pull-right">9</span> Motoryzacja</a>
                                </li>
                                                                                                                            <li><a href="http://localhost:8000/produkty-muzyka/produkt:s%25C5%2582uchawki.html">
                                    <span class="badge pull-right">130</span> Muzyka</a>
                                </li>
                                                                                                                            <li><a href="http://localhost:8000/produkty-sport-i-hobby/produkt:s%25C5%2582uchawki.html">
                                    <span class="badge pull-right">20</span> Sport i hobby</a>
                                </li>
                                                                                                                            <li><a href="http://localhost:8000/produkty-sprzet-rtv/produkt:s%25C5%2582uchawki.html">
                                    <span class="badge pull-right">1923</span> Sprzęt RTV</a>
                                </li>
                                                                                                                            <li><a href="http://localhost:8000/produkty-telefony-i-akcesoria/produkt:s%25C5%2582uchawki.html">
                                    <span class="badge pull-right">220</span> Telefony i akcesoria</a>
                                </li>
                                                                                    </ul>
                    </div>
                </div>
            </div>
            
                <div class="panel panel-default category-filter">
        <div class="panel-heading">
            <h4 class="panel-title">
                <a data-toggle="collapse" href="#collapse-prices" class="category-filter-title collapsed">
                    Cena
                    <i class="filter-open fa fa-angle-down"></i>
                    <i class="filter-close fa fa-angle-up"></i>
                </a>
            </h4>
        </div>
        <div  data-links='keep-view' id="collapse-prices" class="panel-collapse in" style="height: auto;;">
            <div class="panel-body">
                <ul>
                                                                                        <li class="">
                            <a rel="nofollow" href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,cena:1.29~34.00.html">
                                <span class="badge pull-right">819</span> 1,29 - 34,00 zł
                            </a>
                        </li>
                                                                    <li class="">
                            <a rel="nofollow" href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,cena:34.48~84.90.html">
                                <span class="badge pull-right">1033</span> 34,48 - 84,90 zł
                            </a>
                        </li>
                                                                    <li class="">
                            <a rel="nofollow" href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,cena:84.92~221.14.html">
                                <span class="badge pull-right">880</span> 84,92 - 221,14 zł
                            </a>
                        </li>
                                                                    <li class="">
                            <a rel="nofollow" href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,cena:222.00~5999.00.html">
                                <span class="badge pull-right">667</span> 222,00 - 5999,00 zł
                            </a>
                        </li>
                    
                                            <li class="lower">
                            <form class="form" role="form">
                                <div class="input-group">
                                    <input id="-prices-range-from" value="" type="text" class="form-control input-sm" placeholder="od">
                                    <div class="input-group-addon">-</div>
                                    <input id="-prices-range-to" value="" type="text" class="form-control input-sm" placeholder="do">
                                    <div class="input-group-addon">PLN</div>
                                    <span class="input-group-btn pull-right filter-submit">
                                      <button onclick="filterRanges('http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,cena:%25s~%25s.html', '-prices-range-from', '-prices-range-to')" class="btn btn-sm btn-link" type="button">zastosuj</button>
                                    </span>
                                </div>
                            </form>
                        </li>
                                    </ul>
            </div>
        </div>
    </div>

                <div class="panel panel-default category-filter">
        <div class="panel-heading">
            <h4 class="panel-title">
                <a data-toggle="collapse" href="#collapse-producers" class="category-filter-title collapsed">
                    Producent
                    <i class="filter-open fa fa-angle-down"></i>
                    <i class="filter-close fa fa-angle-up"></i>
                </a>
            </h4>
        </div>
        <div  data-links='keep-view' id="collapse-producers" class="panel-collapse collapse" style="height: 0;;">
            <div class="panel-body">
                <ul>
                                                                                        <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:a4tech.html">
                                <span class="badge pull-right">10</span> A4Tech 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:aiwa.html">
                                <span class="badge pull-right">8</span> AIWA 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:akg.html">
                                <span class="badge pull-right">27</span> AKG 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:alecto.html">
                                <span class="badge pull-right">8</span> ALECTO 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:apple.html">
                                <span class="badge pull-right">10</span> Apple 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:asus.html">
                                <span class="badge pull-right">12</span> Asus 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:audictus.html">
                                <span class="badge pull-right">6</span> Audictus 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:awei.html">
                                <span class="badge pull-right">12</span> Awei 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:axtel.html">
                                <span class="badge pull-right">6</span> Axtel 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:baseus.html">
                                <span class="badge pull-right">25</span> Baseus 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:beats-by-dr-dre.html">
                                <span class="badge pull-right">7</span> Beats by Dr. Dre 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:beyerdynamic.html">
                                <span class="badge pull-right">13</span> Beyerdynamic 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:blow.html">
                                <span class="badge pull-right">9</span> Blow 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:buddyphones.html">
                                <span class="badge pull-right">6</span> BuddyPhones 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:catalyst.html">
                                <span class="badge pull-right">13</span> CATALYST 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:corsair.html">
                                <span class="badge pull-right">14</span> Corsair 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:creative.html">
                                <span class="badge pull-right">9</span> Creative 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:deante.html">
                                <span class="badge pull-right">77</span> DEANTE 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:defender.html">
                                <span class="badge pull-right">55</span> Defender 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:edifier.html">
                                <span class="badge pull-right">44</span> Edifier 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:esperanza.html">
                                <span class="badge pull-right">81</span> Esperanza 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:esr.html">
                                <span class="badge pull-right">7</span> ESR 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:fala.html">
                                <span class="badge pull-right">23</span> FALA 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:fiio.html">
                                <span class="badge pull-right">6</span> FiiO 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:forever.html">
                                <span class="badge pull-right">8</span> Forever 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:fostex.html">
                                <span class="badge pull-right">7</span> Fostex 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:fresh-n-rebel.html">
                                <span class="badge pull-right">10</span> Fresh 'n Rebel 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:gembird.html">
                                <span class="badge pull-right">19</span> Gembird 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:gogen.html">
                                <span class="badge pull-right">9</span> GoGEN 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:guess.html">
                                <span class="badge pull-right">60</span> Guess 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:hama.html">
                                <span class="badge pull-right">17</span> Hama 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:hansgrohe.html">
                                <span class="badge pull-right">7</span> HANSGROHE 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:havit.html">
                                <span class="badge pull-right">23</span> Havit 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:hp.html">
                                <span class="badge pull-right">11</span> HP 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:huawei.html">
                                <span class="badge pull-right">10</span> Huawei 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:hyperx.html">
                                <span class="badge pull-right">7</span> HyperX 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:ibox.html">
                                <span class="badge pull-right">7</span> iBox 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:jabra.html">
                                <span class="badge pull-right">24</span> Jabra 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:jbl.html">
                                <span class="badge pull-right">63</span> JBL 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:jlab.html">
                                <span class="badge pull-right">7</span> JLab 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:jvc.html">
                                <span class="badge pull-right">41</span> JVC 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:koss.html">
                                <span class="badge pull-right">11</span> Koss 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:kruger-matz.html">
                                <span class="badge pull-right">17</span> Kruger &amp; Matz 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:laut.html">
                                <span class="badge pull-right">7</span> Laut 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:lenovo.html">
                                <span class="badge pull-right">14</span> Lenovo 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:lg.html">
                                <span class="badge pull-right">6</span> LG 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:logitech.html">
                                <span class="badge pull-right">25</span> Logitech 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:mackie.html">
                                <span class="badge pull-right">6</span> Mackie 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:marvo.html">
                                <span class="badge pull-right">15</span> Marvo 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:media-tech.html">
                                <span class="badge pull-right">12</span> Media-Tech 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:meliconi.html">
                                <span class="badge pull-right">8</span> Meliconi 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:microsoft.html">
                                <span class="badge pull-right">10</span> Microsoft 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:modecom.html">
                                <span class="badge pull-right">8</span> ModeCom 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:mozos.html">
                                <span class="badge pull-right">8</span> MOZOS 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:msi.html">
                                <span class="badge pull-right">8</span> MSI 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:natec.html">
                                <span class="badge pull-right">26</span> Natec 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:niceboy.html">
                                <span class="badge pull-right">6</span> Niceboy 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:noxo.html">
                                <span class="badge pull-right">6</span> Noxo 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:omnires.html">
                                <span class="badge pull-right">41</span> OMNIRES 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:oppo.html">
                                <span class="badge pull-right">7</span> Oppo 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:otl.html">
                                <span class="badge pull-right">12</span> OTL 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:panasonic.html">
                                <span class="badge pull-right">21</span> Panasonic 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:pdp.html">
                                <span class="badge pull-right">21</span> PDP 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:philips.html">
                                <span class="badge pull-right">35</span> Philips 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:pioneer.html">
                                <span class="badge pull-right">12</span> Pioneer 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:plantronics.html">
                                <span class="badge pull-right">17</span> Plantronics 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:qcy.html">
                                <span class="badge pull-right">8</span> QCY 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:qoltec.html">
                                <span class="badge pull-right">21</span> Qoltec 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:razer.html">
                                <span class="badge pull-right">18</span> Razer 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:rea.html">
                                <span class="badge pull-right">9</span> Rea 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:rebeltec.html">
                                <span class="badge pull-right">13</span> Rebeltec 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:reloop.html">
                                <span class="badge pull-right">10</span> Reloop 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:ringke.html">
                                <span class="badge pull-right">9</span> RINGKE 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:roccat.html">
                                <span class="badge pull-right">6</span> Roccat 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:samsung.html">
                                <span class="badge pull-right">14</span> Samsung 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:savio.html">
                                <span class="badge pull-right">18</span> Savio 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:sena.html">
                                <span class="badge pull-right">8</span> Sena 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:sennheiser.html">
                                <span class="badge pull-right">19</span> Sennheiser 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:skullcandy.html">
                                <span class="badge pull-right">13</span> Skullcandy 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:somostel.html">
                                <span class="badge pull-right">7</span> Somostel 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:sony.html">
                                <span class="badge pull-right">37</span> Sony 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:sotbe.html">
                                <span class="badge pull-right">23</span> SOTBE 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:soundpeats.html">
                                <span class="badge pull-right">10</span> Soundpeats 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:spigen.html">
                                <span class="badge pull-right">40</span> SPIGEN 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:steelseries.html">
                                <span class="badge pull-right">10</span> SteelSeries 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:takstar.html">
                                <span class="badge pull-right">10</span> Takstar 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:taotronics.html">
                                <span class="badge pull-right">7</span> TaoTronics 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:tcl.html">
                                <span class="badge pull-right">9</span> TCL 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:tech-protect.html">
                                <span class="badge pull-right">21</span> TECH-PROTECT 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:thomson.html">
                                <span class="badge pull-right">12</span> Thomson 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:tracer.html">
                                <span class="badge pull-right">15</span> Tracer 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:trust.html">
                                <span class="badge pull-right">33</span> Trust 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:turtle-beach.html">
                                <span class="badge pull-right">32</span> TURTLE BEACH 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:vakoss.html">
                                <span class="badge pull-right">8</span> Vakoss 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:vertux.html">
                                <span class="badge pull-right">7</span> Vertux 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:xiaomi.html">
                                <span class="badge pull-right">21</span> Xiaomi 
                            </a>
                        </li>
                                                                    <li class="">
                            <a href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki,producent:xmusic.html">
                                <span class="badge pull-right">7</span> Xmusic 
                            </a>
                        </li>
                    
                                    </ul>
            </div>
        </div>
    </div>

            
                    </div>

    </div>


    <div class="col-md-9 col-sm-12">

    <div class="row category-details">
        <div class="col-xs-11">
            <h1>
                <span class="name"><small>3399 produktów</small></span>
                                    <span>
                        <span class="badge-name">szukasz:</span>
                        <span class="badge">
                            <button type="button" onclick="document.location.href='/'" class="close">×</button>
                            <span>słuchawki</span>
                        </span>
                    </span>
                                            </h1>
        </div>
        <div class="col-xs-1 text-right options">

            <div class="btn-group">
                <a href="#" class="btn btn-link dropdown-toggle" data-toggle="dropdown">
                    <i class="fa fa-bars"></i>
                </a>
                <ul class="dropdown-menu dropdown-menu-right">
                    <li class="dropdown-header">Widok</li>
                    <li id="category-view-list"><a href="#list"><i class="fa fa-th-list"></i> lista</a></li>
                    <li id="category-view-grid" class="active"><a href="#box"><i class="fa fa-th"></i> kafle</a></li>
                    <li class="divider"></li>
                    <li class="dropdown-header">Sortowanie</li>

                    
                                                                        <li class="active"><a rel="nofollow" href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki.html"><i class="fa                                                     fa-long-arrow-down
                                            "></i> domyślne</a></li>
                                                                                                <li><a rel="nofollow" href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki--najpopularniejsze.html"><i class="fa                                                     fa-sort-amount-desc
                                            "></i> od popularnych</a></li>
                                                                                                <li><a rel="nofollow" href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki--najmniej-popularne.html"><i class="fa                                                     fa-sort-amount-asc
                                            "></i> od mało popularnych</a></li>
                                                                                                <li><a rel="nofollow" href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki--od-a-do-z.html"><i class="fa                                                     fa-sort-alpha-asc
                                            "></i> od a do z</a></li>
                                                                                                <li><a rel="nofollow" href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki--od-z-do-a.html"><i class="fa                                                     fa-sort-alpha-desc
                                            "></i> od z do a</a></li>
                                                                                                <li><a rel="nofollow" href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki--najtansze.html"><i class="fa                                                     fa-sort-numeric-asc
                                            "></i> od najtańszych</a></li>
                                                                                                <li><a rel="nofollow" href="http://localhost:8000/produkty-produkt:s%25C5%2582uchawki--najdrozsze.html"><i class="fa                                                     fa-sort-numeric-desc
                                            "></i> od najdroższych</a></li>
                                                            </ul>
            </div>
        </div>
    </div>

    <div class="row category-products">

            <!---- product starts here ---->
        <div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 product-wrapper-grid">
            <div class="product normal">
                <a href="/produkt-sluchawki/sluchawki-hiro-bragi.html">
                    <div class="image">
                        <img class="img-responsive" src="http://offers.gallery/p-d7-cd-d7cddc3980904e7b046696ae5f8f3673500x500/suchawki-hiro-bragi.jpg" title="Słuchawki HIRO Bragi" />
                    </div>
                </a>
                <div class="product-details">
                    <div class="row">
                        <div class="col-lg-9 col-sm-8 col-xs-12 title-features">
                            <a href="/produkt-sluchawki/sluchawki-hiro-bragi.html">
                                <h5 class="title">Słuchawki HIRO Bragi</h5>
                            </a>
                            <div class="product-details-popup text-center">
                                                                <a href="/produkt-sluchawki/sluchawki-hiro-bragi.html" data-container="body" data-placement="left" data-toggle="tooltip" >
                                    <i class="fa fa-align-justify"></i>
                                    <div class="tooltip_title_wrapper hidden">
                                        <p>SŁUCHAWKI Z MIKROFONEM HIRO BRAGI [Najważniejsze właściwości] Najważniejsze właściwości - Przetwornik 40mm - Pulsujące podświetlenie RGB - Maksymalny komfort wykorzystywania - Specjalnie...</p>
                                    </div>
                                </a>
                                                                                                                                                            </div>
                            <ul class="features">
                                                                    <li>Mikrofon:
                                        <em>    tak


</em>
                                    </li>
                                                                    <li>Rodzaj połączenia:
                                        <em>    przewodowe


</em>
                                    </li>
                                                            </ul>
                        </div>
                        <div class="col-lg-3 col-sm-4 col-xs-12 price">
                            <a href="/produkt-sluchawki/sluchawki-hiro-bragi.html"><span class="price lead">od 62,84 PLN</span></a>
                            <a href="/produkt-sluchawki/sluchawki-hiro-bragi.html" class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty <i class="fa fa-angle-right"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!---- product ends here ---->
            <!---- product starts here ---->
        <div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 product-wrapper-grid">
            <div class="product normal">
                <a href="/produkt-sluchawki/sluchawki-redragon-hylas-bialy.html">
                    <div class="image">
                        <img class="img-responsive" src="http://offers.gallery/p-3b-db-3bdba3c8e44f4c80ef031c2beb5fb46d500x500/suchawki-redragon-hylas-biay.jpg" title="Słuchawki REDRAGON Hylas Biały" />
                    </div>
                </a>
                <div class="product-details">
                    <div class="row">
                        <div class="col-lg-9 col-sm-8 col-xs-12 title-features">
                            <a href="/produkt-sluchawki/sluchawki-redragon-hylas-bialy.html">
                                <h5 class="title">Słuchawki REDRAGON Hylas Biały</h5>
                            </a>
                            <div class="product-details-popup text-center">
                                                                <a href="/produkt-sluchawki/sluchawki-redragon-hylas-bialy.html" data-container="body" data-placement="left" data-toggle="tooltip" >
                                    <i class="fa fa-align-justify"></i>
                                    <div class="tooltip_title_wrapper hidden">
                                        <p>Przewodowe słuchawki do gier Redragon Hylas pozwalają usłyszeć każdy detal. Wyraźnie słuchaj wszystkiego, od ostrzału wroga po kroki przeciwnika, abyś mógł skupić się na wygrywaniu. H260 jest...</p>
                                    </div>
                                </a>
                                                                                                                                                            </div>
                            <ul class="features">
                                                            </ul>
                        </div>
                        <div class="col-lg-3 col-sm-4 col-xs-12 price">
                            <a href="/produkt-sluchawki/sluchawki-redragon-hylas-bialy.html"><span class="price lead">od 53,70 PLN</span></a>
                            <a href="/produkt-sluchawki/sluchawki-redragon-hylas-bialy.html" class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty <i class="fa fa-angle-right"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!---- product ends here ---->
            <!---- product starts here ---->
        <div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 product-wrapper-grid">
            <div class="product normal">
                <a href="/produkt-sluchawki/sluchawki-defender-apex-pro.html">
                    <div class="image">
                        <img class="img-responsive" src="http://offers.gallery/p-5a-0c-5a0c9b4a2b5854cdc1cf958ba28e50ce500x500/suchawki-defender-apex-pro.jpg" title="Słuchawki DEFENDER Apex Pro" />
                    </div>
                </a>
                <div class="product-details">
                    <div class="row">
                        <div class="col-lg-9 col-sm-8 col-xs-12 title-features">
                            <a href="/produkt-sluchawki/sluchawki-defender-apex-pro.html">
                                <h5 class="title">Słuchawki DEFENDER Apex Pro</h5>
                            </a>
                            <div class="product-details-popup text-center">
                                                                <a href="/produkt-sluchawki/sluchawki-defender-apex-pro.html" data-container="body" data-placement="left" data-toggle="tooltip" >
                                    <i class="fa fa-align-justify"></i>
                                    <div class="tooltip_title_wrapper hidden">
                                        <p>Czułość słuchawek: 105dB &amp;#43;/-3dB Długość kabla / Maksymalny zasięg: 1.80 m Impedancja (Om): 32.0 informacje dopełniające: kolekcja produktów dla graczy System przetwarzania dźwięku symuluje...</p>
                                    </div>
                                </a>
                                                                                                                                                            </div>
                            <ul class="features">
                                                            </ul>
                        </div>
                        <div class="col-lg-3 col-sm-4 col-xs-12 price">
                            <a href="/produkt-sluchawki/sluchawki-defender-apex-pro.html"><span class="price lead">od 94,99 PLN</span></a>
                            <a href="/produkt-sluchawki/sluchawki-defender-apex-pro.html" class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty <i class="fa fa-angle-right"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!---- product ends here ---->
            <!---- product starts here ---->
        <div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 product-wrapper-grid">
            <div class="product normal">
                <a href="/produkt-sluchawki/sluchawki-defender-pyro-rgb.html">
                    <div class="image">
                        <img class="img-responsive" src="http://offers.gallery/p-17-24-1724c7f0b675c08cd25583c3064427f0500x500/suchawki-defender-pyro-rgb.jpg" title="Słuchawki DEFENDER Pyro RGB" />
                    </div>
                </a>
                <div class="product-details">
                    <div class="row">
                        <div class="col-lg-9 col-sm-8 col-xs-12 title-features">
                            <a href="/produkt-sluchawki/sluchawki-defender-pyro-rgb.html">
                                <h5 class="title">Słuchawki DEFENDER Pyro RGB</h5>
                            </a>
                            <div class="product-details-popup text-center">
                                                                <a href="/produkt-sluchawki/sluchawki-defender-pyro-rgb.html" data-container="body" data-placement="left" data-toggle="tooltip" >
                                    <i class="fa fa-align-justify"></i>
                                    <div class="tooltip_title_wrapper hidden">
                                        <p>Czułość mikrofonu: -56 dB &amp;#43;/-3dB Czułość słuchawek: 116dB &amp;#43;/-3dB Długość kabla / Maksymalny zasięg: 2.00 m Impedancja (Om): 32.0 dane dopełniające: seria produktów dla graczy Kupon do gry i...</p>
                                    </div>
                                </a>
                                                                                                                                                            </div>
                            <ul class="features">
                                                            </ul>
                        </div>
                        <div class="col-lg-3 col-sm-4 col-xs-12 price">
                            <a href="/produkt-sluchawki/sluchawki-defender-pyro-rgb.html"><span class="price lead">od 80,74 PLN</span></a>
                            <a href="/produkt-sluchawki/sluchawki-defender-pyro-rgb.html" class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty <i class="fa fa-angle-right"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!---- product ends here ---->
            <!---- product starts here ---->
        <div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 product-wrapper-grid">
            <div class="product normal">
                <a href="/produkt-sluchawki/niceboy-sluchawki-hive-drops.html">
                    <div class="image">
                        <img class="img-responsive" src="http://offers.gallery/p-1b-56-1b56b8dcf85fdb86fa60da4cf0caa123500x500/niceboy-suchawki-hive-drops.jpg" title="Niceboy słuchawki HIVE drops" />
                    </div>
                </a>
                <div class="product-details">
                    <div class="row">
                        <div class="col-lg-9 col-sm-8 col-xs-12 title-features">
                            <a href="/produkt-sluchawki/niceboy-sluchawki-hive-drops.html">
                                <h5 class="title">Niceboy słuchawki HIVE drops</h5>
                            </a>
                            <div class="product-details-popup text-center">
                                                                <a href="/produkt-sluchawki/niceboy-sluchawki-hive-drops.html" data-container="body" data-placement="left" data-toggle="tooltip" >
                                    <i class="fa fa-align-justify"></i>
                                    <div class="tooltip_title_wrapper hidden">
                                        <p>Dni MALL.PL – Zniżka 20% na wybrane produkty audio i kamery producenta Niceboy z kodem 22MDC2PL28 (od 07.02. Do 20.02.2022 r. Lub wyczerpania zapasów)! Francuska nazwa nawiązuje do ich uroku i...</p>
                                    </div>
                                </a>
                                                                                                                                                            </div>
                            <ul class="features">
                                                            </ul>
                        </div>
                        <div class="col-lg-3 col-sm-4 col-xs-12 price">
                            <a href="/produkt-sluchawki/niceboy-sluchawki-hive-drops.html"><span class="price lead">od 129,99 PLN</span></a>
                            <a href="/produkt-sluchawki/niceboy-sluchawki-hive-drops.html" class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty <i class="fa fa-angle-right"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!---- product ends here ---->
            <!---- product starts here ---->
        <div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 product-wrapper-grid">
            <div class="product normal">
                <a href="/produkt-sluchawki/sluchawki-defender-zeyrox.html">
                    <div class="image">
                        <img class="img-responsive" src="http://offers.gallery/p-45-dd-45dd26da13abaa43bec865e297134cbe500x500/suchawki-defender-zeyrox.jpg" title="Słuchawki DEFENDER Zeyrox" />
                    </div>
                </a>
                <div class="product-details">
                    <div class="row">
                        <div class="col-lg-9 col-sm-8 col-xs-12 title-features">
                            <a href="/produkt-sluchawki/sluchawki-defender-zeyrox.html">
                                <h5 class="title">Słuchawki DEFENDER Zeyrox</h5>
                            </a>
                            <div class="product-details-popup text-center">
                                                                <a href="/produkt-sluchawki/sluchawki-defender-zeyrox.html" data-container="body" data-placement="left" data-toggle="tooltip" >
                                    <i class="fa fa-align-justify"></i>
                                    <div class="tooltip_title_wrapper hidden">
                                        <p>Czułość mikrofonu: -54dB±2dB Czułość słuchawek: 106dB &amp;#43;/-3dB Długość kabla / Maksymalny zasięg: 1.80 m Impedancja (Om): 32.0 dane uzupełniające: kolekcja produktów dla graczy Dobra izolacja...</p>
                                    </div>
                                </a>
                                                                                                                                                            </div>
                            <ul class="features">
                                                            </ul>
                        </div>
                        <div class="col-lg-3 col-sm-4 col-xs-12 price">
                            <a href="/produkt-sluchawki/sluchawki-defender-zeyrox.html"><span class="price lead">od 56,90 PLN</span></a>
                            <a href="/produkt-sluchawki/sluchawki-defender-zeyrox.html" class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty <i class="fa fa-angle-right"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!---- product ends here ---->
            <!---- product starts here ---->
        <div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 product-wrapper-grid">
            <div class="product normal">
                <a href="/produkt-sluchawki/sluchawki-marvo-hg8936.html">
                    <div class="image">
                        <img class="img-responsive" src="http://offers.gallery/p-8a-88-8a8882ab3d2934fb9b5c2e8d4bd85f15500x500/suchawki-marvo-hg8936.jpg" title="Słuchawki MARVO HG8936" />
                    </div>
                </a>
                <div class="product-details">
                    <div class="row">
                        <div class="col-lg-9 col-sm-8 col-xs-12 title-features">
                            <a href="/produkt-sluchawki/sluchawki-marvo-hg8936.html">
                                <h5 class="title">Słuchawki MARVO HG8936</h5>
                            </a>
                            <div class="product-details-popup text-center">
                                                                <a href="/produkt-sluchawki/sluchawki-marvo-hg8936.html" data-container="body" data-placement="left" data-toggle="tooltip" >
                                    <i class="fa fa-align-justify"></i>
                                    <div class="tooltip_title_wrapper hidden">
                                        <p>niepowtarzalny fantastyczny zestaw gamingowy MARVO HG8936 w kolorze pastelowego różu i łamanej bieli. Załóż na stream, video live lub w trakcie e-lekcji i oczaruj przyjaciół tym niepowtarzalnym...</p>
                                    </div>
                                </a>
                                                                                                                                                            </div>
                            <ul class="features">
                                                            </ul>
                        </div>
                        <div class="col-lg-3 col-sm-4 col-xs-12 price">
                            <a href="/produkt-sluchawki/sluchawki-marvo-hg8936.html"><span class="price lead">od 57,90 PLN</span></a>
                            <a href="/produkt-sluchawki/sluchawki-marvo-hg8936.html" class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty <i class="fa fa-angle-right"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!---- product ends here ---->
            <!---- product starts here ---->
        <div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 product-wrapper-grid">
            <div class="product normal">
                <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253DSLS8ejkliXiaGouXv2WpVL2%252A52i1EBKSXDSxUUyW%2524EpEqlvLUMn6I5nJa2vphCnoUILJuNooFz5mOiyNh5pzufv6tzK6AunnvhTSLvArWYEFrLIseCBQ3wA8TKmX%252AExE_P.API_8_24_" rel="nofollow">
                    <div class="image">
                        <img class="img-responsive" src="http://offers.gallery/noimg_500x500.png" title="Słuchawki douszne Qoltec 50833" />
                    </div>
                </a>
                <div class="product-details">
                    <div class="row">
                        <div class="col-lg-9 col-sm-8 col-xs-12 title-features">
                            <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253DSLS8ejkliXiaGouXv2WpVL2%252A52i1EBKSXDSxUUyW%2524EpEqlvLUMn6I5nJa2vphCnoUILJuNooFz5mOiyNh5pzufv6tzK6AunnvhTSLvArWYEFrLIseCBQ3wA8TKmX%252AExE_P.API_8_24_" rel="nofollow">
                                <h5 class="title">Słuchawki douszne Qoltec 50833</h5>
                            </a>
                            <div class="product-details-popup text-center">
                                                                <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253DSLS8ejkliXiaGouXv2WpVL2%252A52i1EBKSXDSxUUyW%2524EpEqlvLUMn6I5nJa2vphCnoUILJuNooFz5mOiyNh5pzufv6tzK6AunnvhTSLvArWYEFrLIseCBQ3wA8TKmX%252AExE_P.API_8_24_" rel="nofollow" data-container="body" data-placement="left" data-toggle="tooltip" >
                                    <i class="fa fa-align-justify"></i>
                                    <div class="tooltip_title_wrapper hidden">
                                        <p>Słuchawki douszne Qoltec 50833</p>
                                    </div>
                                </a>
                                                                                                                                                                    <a href="/produkt-sluchawki/sluchawki-douszne-qoltec-50833.html"><i class="fa fa-link"></i></a>
                                                            </div>
                            <ul class="features">
                                                            </ul>
                        </div>
                        <div class="col-lg-3 col-sm-4 col-xs-12 price">
                            <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253DSLS8ejkliXiaGouXv2WpVL2%252A52i1EBKSXDSxUUyW%2524EpEqlvLUMn6I5nJa2vphCnoUILJuNooFz5mOiyNh5pzufv6tzK6AunnvhTSLvArWYEFrLIseCBQ3wA8TKmX%252AExE_P.API_8_24_" rel="nofollow"><span class="price lead">29,82 PLN</span></a>
                            <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253DSLS8ejkliXiaGouXv2WpVL2%252A52i1EBKSXDSxUUyW%2524EpEqlvLUMn6I5nJa2vphCnoUILJuNooFz5mOiyNh5pzufv6tzK6AunnvhTSLvArWYEFrLIseCBQ3wA8TKmX%252AExE_P.API_8_24_" rel="nofollow" class="btn btn-success btn-success-outlined btn-icon-right">Przejdź do sklepu <i class="fa fa-angle-right"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!---- product ends here ---->
            <!---- product starts here ---->
        <div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 product-wrapper-grid">
            <div class="product normal">
                <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253DyTF2tY0n7FUoRi83f5RzAqUgcvf7DQMN9lq69nls2s8Y2f9TjpqZQsyw0U07hacXcoA95LTRgr2eOeFzrl65rZIOxZ3VxOFZJC1201EtMQxTk10W6ZrsxwyWpOVKLld%252A_P.API_9_24_" rel="nofollow">
                    <div class="image">
                        <img class="img-responsive" src="http://offers.gallery/noimg_500x500.png" title="Słuchawki douszne Qoltec 50832" />
                    </div>
                </a>
                <div class="product-details">
                    <div class="row">
                        <div class="col-lg-9 col-sm-8 col-xs-12 title-features">
                            <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253DyTF2tY0n7FUoRi83f5RzAqUgcvf7DQMN9lq69nls2s8Y2f9TjpqZQsyw0U07hacXcoA95LTRgr2eOeFzrl65rZIOxZ3VxOFZJC1201EtMQxTk10W6ZrsxwyWpOVKLld%252A_P.API_9_24_" rel="nofollow">
                                <h5 class="title">Słuchawki douszne Qoltec 50832</h5>
                            </a>
                            <div class="product-details-popup text-center">
                                                                <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253DyTF2tY0n7FUoRi83f5RzAqUgcvf7DQMN9lq69nls2s8Y2f9TjpqZQsyw0U07hacXcoA95LTRgr2eOeFzrl65rZIOxZ3VxOFZJC1201EtMQxTk10W6ZrsxwyWpOVKLld%252A_P.API_9_24_" rel="nofollow" data-container="body" data-placement="left" data-toggle="tooltip" >
                                    <i class="fa fa-align-justify"></i>
                                    <div class="tooltip_title_wrapper hidden">
                                        <p>Słuchawki douszne Qoltec 50832</p>
                                    </div>
                                </a>
                                                                                                                                                                    <a href="/produkt-sluchawki/sluchawki-douszne-qoltec-50832.html"><i class="fa fa-link"></i></a>
                                                            </div>
                            <ul class="features">
                                                            </ul>
                        </div>
                        <div class="col-lg-3 col-sm-4 col-xs-12 price">
                            <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253DyTF2tY0n7FUoRi83f5RzAqUgcvf7DQMN9lq69nls2s8Y2f9TjpqZQsyw0U07hacXcoA95LTRgr2eOeFzrl65rZIOxZ3VxOFZJC1201EtMQxTk10W6ZrsxwyWpOVKLld%252A_P.API_9_24_" rel="nofollow"><span class="price lead">29,73 PLN</span></a>
                            <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253DyTF2tY0n7FUoRi83f5RzAqUgcvf7DQMN9lq69nls2s8Y2f9TjpqZQsyw0U07hacXcoA95LTRgr2eOeFzrl65rZIOxZ3VxOFZJC1201EtMQxTk10W6ZrsxwyWpOVKLld%252A_P.API_9_24_" rel="nofollow" class="btn btn-success btn-success-outlined btn-icon-right">Przejdź do sklepu <i class="fa fa-angle-right"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!---- product ends here ---->
            <!---- product starts here ---->
        <div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 product-wrapper-grid">
            <div class="product normal">
                <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253DB5k6WGznSr7%2524EW8IyTZsh6kSonHDYYxgkIA3VS8ViPtCkYgKILrGEy9REZ3L0PJeLm%252AvN2kxHo13ZWadM%252AoYV7IB2%2524sivi6Nf6%2524O5J8yx4JoRX62NMNSJR1gJdG9GVZ4_P.API_10_24_" rel="nofollow">
                    <div class="image">
                        <img class="img-responsive" src="http://offers.gallery/noimg_500x500.png" title="Słuchawki douszne Qoltec 50834" />
                    </div>
                </a>
                <div class="product-details">
                    <div class="row">
                        <div class="col-lg-9 col-sm-8 col-xs-12 title-features">
                            <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253DB5k6WGznSr7%2524EW8IyTZsh6kSonHDYYxgkIA3VS8ViPtCkYgKILrGEy9REZ3L0PJeLm%252AvN2kxHo13ZWadM%252AoYV7IB2%2524sivi6Nf6%2524O5J8yx4JoRX62NMNSJR1gJdG9GVZ4_P.API_10_24_" rel="nofollow">
                                <h5 class="title">Słuchawki douszne Qoltec 50834</h5>
                            </a>
                            <div class="product-details-popup text-center">
                                                                <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253DB5k6WGznSr7%2524EW8IyTZsh6kSonHDYYxgkIA3VS8ViPtCkYgKILrGEy9REZ3L0PJeLm%252AvN2kxHo13ZWadM%252AoYV7IB2%2524sivi6Nf6%2524O5J8yx4JoRX62NMNSJR1gJdG9GVZ4_P.API_10_24_" rel="nofollow" data-container="body" data-placement="left" data-toggle="tooltip" >
                                    <i class="fa fa-align-justify"></i>
                                    <div class="tooltip_title_wrapper hidden">
                                        <p>Słuchawki douszne Qoltec 50834</p>
                                    </div>
                                </a>
                                                                                                                                                                    <a href="/produkt-sluchawki/sluchawki-douszne-qoltec-50834.html"><i class="fa fa-link"></i></a>
                                                            </div>
                            <ul class="features">
                                                            </ul>
                        </div>
                        <div class="col-lg-3 col-sm-4 col-xs-12 price">
                            <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253DB5k6WGznSr7%2524EW8IyTZsh6kSonHDYYxgkIA3VS8ViPtCkYgKILrGEy9REZ3L0PJeLm%252AvN2kxHo13ZWadM%252AoYV7IB2%2524sivi6Nf6%2524O5J8yx4JoRX62NMNSJR1gJdG9GVZ4_P.API_10_24_" rel="nofollow"><span class="price lead">29,82 PLN</span></a>
                            <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253DB5k6WGznSr7%2524EW8IyTZsh6kSonHDYYxgkIA3VS8ViPtCkYgKILrGEy9REZ3L0PJeLm%252AvN2kxHo13ZWadM%252AoYV7IB2%2524sivi6Nf6%2524O5J8yx4JoRX62NMNSJR1gJdG9GVZ4_P.API_10_24_" rel="nofollow" class="btn btn-success btn-success-outlined btn-icon-right">Przejdź do sklepu <i class="fa fa-angle-right"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!---- product ends here ---->
            <!---- product starts here ---->
        <div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 product-wrapper-grid">
            <div class="product normal">
                <a href="/produkt-sluchawki/sluchawki-marvo-hg9065.html">
                    <div class="image">
                        <img class="img-responsive" src="http://offers.gallery/p-c6-51-c651e28f9d7a523b7f4fcb6ed07f2b33500x500/suchawki-marvo-hg9065.jpg" title="Słuchawki MARVO HG9065" />
                    </div>
                </a>
                <div class="product-details">
                    <div class="row">
                        <div class="col-lg-9 col-sm-8 col-xs-12 title-features">
                            <a href="/produkt-sluchawki/sluchawki-marvo-hg9065.html">
                                <h5 class="title">Słuchawki MARVO HG9065</h5>
                            </a>
                            <div class="product-details-popup text-center">
                                                                <a href="/produkt-sluchawki/sluchawki-marvo-hg9065.html" data-container="body" data-placement="left" data-toggle="tooltip" >
                                    <i class="fa fa-align-justify"></i>
                                    <div class="tooltip_title_wrapper hidden">
                                        <p>MARVO HG9065 postępowy pakiet słuchawkowy dla graczy z funkcją dźwięku przestrzennego 7.1 Virtual Surround. HG9065 to rozwiązanie, które zniewala wyglądem, brzmieniem i komfortem. Słuchawki...</p>
                                    </div>
                                </a>
                                                                                                                                                            </div>
                            <ul class="features">
                                                            </ul>
                        </div>
                        <div class="col-lg-3 col-sm-4 col-xs-12 price">
                            <a href="/produkt-sluchawki/sluchawki-marvo-hg9065.html"><span class="price lead">od 124,00 PLN</span></a>
                            <a href="/produkt-sluchawki/sluchawki-marvo-hg9065.html" class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty <i class="fa fa-angle-right"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!---- product ends here ---->
            <!---- product starts here ---->
        <div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 product-wrapper-grid">
            <div class="product normal">
                <a href="/produkt-sluchawki/sluchawki-marvo-hg9056.html">
                    <div class="image">
                        <img class="img-responsive" src="http://offers.gallery/p-d5-7d-d57d5ffa9ca4361230862ff9f2affeee500x500/suchawki-marvo-hg9056.jpg" title="Słuchawki MARVO HG9056" />
                    </div>
                </a>
                <div class="product-details">
                    <div class="row">
                        <div class="col-lg-9 col-sm-8 col-xs-12 title-features">
                            <a href="/produkt-sluchawki/sluchawki-marvo-hg9056.html">
                                <h5 class="title">Słuchawki MARVO HG9056</h5>
                            </a>
                            <div class="product-details-popup text-center">
                                                                <a href="/produkt-sluchawki/sluchawki-marvo-hg9056.html" data-container="body" data-placement="left" data-toggle="tooltip" >
                                    <i class="fa fa-align-justify"></i>
                                    <div class="tooltip_title_wrapper hidden">
                                        <p>Uchwyć starannie każdy krok lub strzał wrogów podczas gry. Dźwięk przestrzenny 7.1 realnie rozszerza przewagę nad Twoimi przeciwnikami. Sterowanie na kablu pozwala w nieskomplikowany sposób...</p>
                                    </div>
                                </a>
                                                                                                                                    <a href="/produkt-sluchawki/sluchawki-marvo-hg9056.html" data-container="body" data-placement="left" data-toggle="tooltip">
                                        <i class="fa fa-tag"></i>

                                        <div class="tooltip_title_wrapper hidden">
                                            Na tym produkcie możesz zaoszczędzić aż  1%
                                        </div>
                                    </a>
                                                                                            </div>
                            <ul class="features">
                                                            </ul>
                        </div>
                        <div class="col-lg-3 col-sm-4 col-xs-12 price">
                            <a href="/produkt-sluchawki/sluchawki-marvo-hg9056.html"><span class="price lead">od 142,00 PLN</span></a>
                            <a href="/produkt-sluchawki/sluchawki-marvo-hg9056.html" class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty <i class="fa fa-angle-right"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!---- product ends here ---->
            <!---- product starts here ---->
        <div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 product-wrapper-grid">
            <div class="product normal">
                <a href="/produkt-sluchawki/sluchawki-defender-cujo.html">
                    <div class="image">
                        <img class="img-responsive" src="http://offers.gallery/p-28-24-2824f4142a1ca4f1763d23c089987f8f500x500/suchawki-defender-cujo.jpg" title="Słuchawki DEFENDER Cujo" />
                    </div>
                </a>
                <div class="product-details">
                    <div class="row">
                        <div class="col-lg-9 col-sm-8 col-xs-12 title-features">
                            <a href="/produkt-sluchawki/sluchawki-defender-cujo.html">
                                <h5 class="title">Słuchawki DEFENDER Cujo</h5>
                            </a>
                            <div class="product-details-popup text-center">
                                                                <a href="/produkt-sluchawki/sluchawki-defender-cujo.html" data-container="body" data-placement="left" data-toggle="tooltip" >
                                    <i class="fa fa-align-justify"></i>
                                    <div class="tooltip_title_wrapper hidden">
                                        <p>Słuchawki defender z mikrofonem CUJO czarno-czerwone Kompatybilne z komputerami PC, notebookami, konsolami do gier, smartfonami, tabletamiSłuchawki zamknięteSłuchawki z aktywną redukcją hałasu,...</p>
                                    </div>
                                </a>
                                                                                                                                                            </div>
                            <ul class="features">
                                                            </ul>
                        </div>
                        <div class="col-lg-3 col-sm-4 col-xs-12 price">
                            <a href="/produkt-sluchawki/sluchawki-defender-cujo.html"><span class="price lead">od 78,09 PLN</span></a>
                            <a href="/produkt-sluchawki/sluchawki-defender-cujo.html" class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty <i class="fa fa-angle-right"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!---- product ends here ---->
            <!---- product starts here ---->
        <div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 product-wrapper-grid">
            <div class="product normal">
                <a href="/produkt-sluchawki/sluchawki-defender-apex.html">
                    <div class="image">
                        <img class="img-responsive" src="http://offers.gallery/p-c5-9c-c59cae73ed98377931622fe01d0d5328500x500/suchawki-defender-apex.jpg" title="Słuchawki DEFENDER Apex" />
                    </div>
                </a>
                <div class="product-details">
                    <div class="row">
                        <div class="col-lg-9 col-sm-8 col-xs-12 title-features">
                            <a href="/produkt-sluchawki/sluchawki-defender-apex.html">
                                <h5 class="title">Słuchawki DEFENDER Apex</h5>
                            </a>
                            <div class="product-details-popup text-center">
                                                                <a href="/produkt-sluchawki/sluchawki-defender-apex.html" data-container="body" data-placement="left" data-toggle="tooltip" >
                                    <i class="fa fa-align-justify"></i>
                                    <div class="tooltip_title_wrapper hidden">
                                        <p>Czułość mikrofonu: -54 dB &amp;#43;/-3dB Czułość słuchawek: 101dB &amp;#43;/-3dB Długość kabla / Maksymalny zasięg: 1.80 m Impedancja (Om): 32.0 informacje dodatkowe: seria produktów dla graczy Mikrofon na...</p>
                                    </div>
                                </a>
                                                                                                                                    <a href="/produkt-sluchawki/sluchawki-defender-apex.html" data-container="body" data-placement="left" data-toggle="tooltip">
                                        <i class="fa fa-tag"></i>

                                        <div class="tooltip_title_wrapper hidden">
                                            Na tym produkcie możesz zaoszczędzić aż  11%
                                        </div>
                                    </a>
                                                                                            </div>
                            <ul class="features">
                                                            </ul>
                        </div>
                        <div class="col-lg-3 col-sm-4 col-xs-12 price">
                            <a href="/produkt-sluchawki/sluchawki-defender-apex.html"><span class="price lead">od 66,90 PLN</span></a>
                            <a href="/produkt-sluchawki/sluchawki-defender-apex.html" class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty <i class="fa fa-angle-right"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!---- product ends here ---->
            <!---- product starts here ---->
        <div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 product-wrapper-grid">
            <div class="product normal">
                <a href="/produkt-sluchawki/sluchawki-defender-stellar.html">
                    <div class="image">
                        <img class="img-responsive" src="http://offers.gallery/p-e8-d9-e8d9f5cc414c885ea41612db124aaf5e500x500/suchawki-defender-stellar.jpg" title="Słuchawki DEFENDER Stellar" />
                    </div>
                </a>
                <div class="product-details">
                    <div class="row">
                        <div class="col-lg-9 col-sm-8 col-xs-12 title-features">
                            <a href="/produkt-sluchawki/sluchawki-defender-stellar.html">
                                <h5 class="title">Słuchawki DEFENDER Stellar</h5>
                            </a>
                            <div class="product-details-popup text-center">
                                                                <a href="/produkt-sluchawki/sluchawki-defender-stellar.html" data-container="body" data-placement="left" data-toggle="tooltip" >
                                    <i class="fa fa-align-justify"></i>
                                    <div class="tooltip_title_wrapper hidden">
                                        <p>Czułość słuchawek: 103dB &amp;#43;/-3dB Długość kabla / Maksymalny zasięg: 2.20 m Impedancja (Om): 32.0 informacje dodatkowe: kolekcja produktów dla graczy Metalowy pałąk i komponenty pokrywy słuchawki...</p>
                                    </div>
                                </a>
                                                                                                                                    <a href="/produkt-sluchawki/sluchawki-defender-stellar.html" data-container="body" data-placement="left" data-toggle="tooltip">
                                        <i class="fa fa-tag"></i>

                                        <div class="tooltip_title_wrapper hidden">
                                            Na tym produkcie możesz zaoszczędzić aż  25%
                                        </div>
                                    </a>
                                                                                            </div>
                            <ul class="features">
                                                            </ul>
                        </div>
                        <div class="col-lg-3 col-sm-4 col-xs-12 price">
                            <a href="/produkt-sluchawki/sluchawki-defender-stellar.html"><span class="price lead">od 79,00 PLN</span></a>
                            <a href="/produkt-sluchawki/sluchawki-defender-stellar.html" class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty <i class="fa fa-angle-right"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!---- product ends here ---->
            <!---- product starts here ---->
        <div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 product-wrapper-grid">
            <div class="product normal">
                <a href="/produkt-sluchawki/sluchawki-spc-gear-viro.html">
                    <div class="image">
                        <img class="img-responsive" src="http://offers.gallery/p-9f-19-9f19f37083388749d58516b39952763a500x500/suchawki-spc-gear-viro.jpg" title="Słuchawki SPC GEAR Viro" />
                    </div>
                </a>
                <div class="product-details">
                    <div class="row">
                        <div class="col-lg-9 col-sm-8 col-xs-12 title-features">
                            <a href="/produkt-sluchawki/sluchawki-spc-gear-viro.html">
                                <h5 class="title">Słuchawki SPC GEAR Viro</h5>
                            </a>
                            <div class="product-details-popup text-center">
                                                                <a href="/produkt-sluchawki/sluchawki-spc-gear-viro.html" data-container="body" data-placement="left" data-toggle="tooltip" >
                                    <i class="fa fa-align-justify"></i>
                                    <div class="tooltip_title_wrapper hidden">
                                        <p>SPC Gear VIRO to przewodowe i wokółuszne słuchawki dla graczy z dynamicznymi przetwornikami i odpinanym mikrofonem. Dokładne ujęcie szczegółów i kierunku w grach, skupienie się na detalach takich...</p>
                                    </div>
                                </a>
                                                                                                                                    <a href="/produkt-sluchawki/sluchawki-spc-gear-viro.html" data-container="body" data-placement="left" data-toggle="tooltip">
                                        <i class="fa fa-tag"></i>

                                        <div class="tooltip_title_wrapper hidden">
                                            Na tym produkcie możesz zaoszczędzić aż  70%
                                        </div>
                                    </a>
                                                                                            </div>
                            <ul class="features">
                                                                    <li>Impedancja:
                                        <em>    32

om
</em>
                                    </li>
                                                                    <li>Mikrofon:
                                        <em>    tak


</em>
                                    </li>
                                                                    <li>Regulacja głośności:
                                        <em>    tak


</em>
                                    </li>
                                                                    <li>Rodzaj połączenia:
                                        <em>    przewodowe


</em>
                                    </li>
                                                                    <li>Typ:
                                        <em>    nauszne


</em>
                                    </li>
                                                            </ul>
                        </div>
                        <div class="col-lg-3 col-sm-4 col-xs-12 price">
                            <a href="/produkt-sluchawki/sluchawki-spc-gear-viro.html"><span class="price lead">od 65,00 PLN</span></a>
                            <a href="/produkt-sluchawki/sluchawki-spc-gear-viro.html" class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty <i class="fa fa-angle-right"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!---- product ends here ---->
            <!---- product starts here ---->
        <div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 product-wrapper-grid">
            <div class="product normal">
                <a href="/produkt-sluchawki/sluchawki-defender-flame-rgb.html">
                    <div class="image">
                        <img class="img-responsive" src="http://offers.gallery/p-41-ed-41ed52f87dba7b15aa3f18cec474063f500x500/suchawki-defender-flame-rgb.jpg" title="Słuchawki DEFENDER Flame RGB" />
                    </div>
                </a>
                <div class="product-details">
                    <div class="row">
                        <div class="col-lg-9 col-sm-8 col-xs-12 title-features">
                            <a href="/produkt-sluchawki/sluchawki-defender-flame-rgb.html">
                                <h5 class="title">Słuchawki DEFENDER Flame RGB</h5>
                            </a>
                            <div class="product-details-popup text-center">
                                                                <a href="/produkt-sluchawki/sluchawki-defender-flame-rgb.html" data-container="body" data-placement="left" data-toggle="tooltip" >
                                    <i class="fa fa-align-justify"></i>
                                    <div class="tooltip_title_wrapper hidden">
                                        <p>Słuchawki defender z mikrofonem FLAME RGB Dioda w obudowie słuchawekPulsujące 7 kolorowe podświetlenie buduje szczególną atmosferę w grze.Podświetlenie pałąka LEDPodwójny pałąkSamo-dopasowujące się...</p>
                                    </div>
                                </a>
                                                                                                                                                            </div>
                            <ul class="features">
                                                            </ul>
                        </div>
                        <div class="col-lg-3 col-sm-4 col-xs-12 price">
                            <a href="/produkt-sluchawki/sluchawki-defender-flame-rgb.html"><span class="price lead">od 166,00 PLN</span></a>
                            <a href="/produkt-sluchawki/sluchawki-defender-flame-rgb.html" class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty <i class="fa fa-angle-right"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!---- product ends here ---->
            <!---- product starts here ---->
        <div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 product-wrapper-grid">
            <div class="product normal">
                <a href="/produkt-sluchawki/otl-sluchawki-pokemon-pokeball.html">
                    <div class="image">
                        <img class="img-responsive" src="http://offers.gallery/p-77-01-7701b2332d9a2f75a5ab6fcc26e0f586500x500/otl-suchawki-pokemon-pokeball.jpg" title="OTL Słuchawki Pokemon Pokeball" />
                    </div>
                </a>
                <div class="product-details">
                    <div class="row">
                        <div class="col-lg-9 col-sm-8 col-xs-12 title-features">
                            <a href="/produkt-sluchawki/otl-sluchawki-pokemon-pokeball.html">
                                <h5 class="title">OTL Słuchawki Pokemon Pokeball</h5>
                            </a>
                            <div class="product-details-popup text-center">
                                                                <a href="/produkt-sluchawki/otl-sluchawki-pokemon-pokeball.html" data-container="body" data-placement="left" data-toggle="tooltip" >
                                    <i class="fa fa-align-justify"></i>
                                    <div class="tooltip_title_wrapper hidden">
                                        <p>Kultowe brandy Słuchawki OTL Pokemon Pokeball to akcesorium, które powstało z myślą o najmłodszych. Marka uwydatnia się licencją na kultowe brandy, które rozkochały w sobie dzieci na całym świecie....</p>
                                    </div>
                                </a>
                                                                                                                                    <a href="/produkt-sluchawki/otl-sluchawki-pokemon-pokeball.html" data-container="body" data-placement="left" data-toggle="tooltip">
                                        <i class="fa fa-tag"></i>

                                        <div class="tooltip_title_wrapper hidden">
                                            Na tym produkcie możesz zaoszczędzić aż  18%
                                        </div>
                                    </a>
                                                                                            </div>
                            <ul class="features">
                                                                    <li>Impedancja:
                                        <em>    32

om
</em>
                                    </li>
                                                                    <li>Mikrofon:
                                        <em>    nie


</em>
                                    </li>
                                                            </ul>
                        </div>
                        <div class="col-lg-3 col-sm-4 col-xs-12 price">
                            <a href="/produkt-sluchawki/otl-sluchawki-pokemon-pokeball.html"><span class="price lead">od 73,48 PLN</span></a>
                            <a href="/produkt-sluchawki/otl-sluchawki-pokemon-pokeball.html" class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty <i class="fa fa-angle-right"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!---- product ends here ---->
            <!---- product starts here ---->
        <div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 product-wrapper-grid">
            <div class="product normal">
                <a href="/produkt-sluchawki/sluchawki-defender-cosmo-pro.html">
                    <div class="image">
                        <img class="img-responsive" src="http://offers.gallery/p-b6-f1-b6f178a14740d6eedcab4d889a66c6ce500x500/suchawki-defender-cosmo-pro.jpg" title="Słuchawki DEFENDER Cosmo Pro" />
                    </div>
                </a>
                <div class="product-details">
                    <div class="row">
                        <div class="col-lg-9 col-sm-8 col-xs-12 title-features">
                            <a href="/produkt-sluchawki/sluchawki-defender-cosmo-pro.html">
                                <h5 class="title">Słuchawki DEFENDER Cosmo Pro</h5>
                            </a>
                            <div class="product-details-popup text-center">
                                                                <a href="/produkt-sluchawki/sluchawki-defender-cosmo-pro.html" data-container="body" data-placement="left" data-toggle="tooltip" >
                                    <i class="fa fa-align-justify"></i>
                                    <div class="tooltip_title_wrapper hidden">
                                        <p>Czułość mikrofonu: -38dB &amp;#43;/- 2dB Czułość słuchawek: 119dB &amp;#43;/-3dB Długość kabla / Maksymalny zasięg: 2.10 m Impedancja (Om): 32.0 informacje dopełniające: seria produktów dla graczy Kupon do...</p>
                                    </div>
                                </a>
                                                                                                                                    <a href="/produkt-sluchawki/sluchawki-defender-cosmo-pro.html" data-container="body" data-placement="left" data-toggle="tooltip">
                                        <i class="fa fa-tag"></i>

                                        <div class="tooltip_title_wrapper hidden">
                                            Na tym produkcie możesz zaoszczędzić aż  19%
                                        </div>
                                    </a>
                                                                                            </div>
                            <ul class="features">
                                                            </ul>
                        </div>
                        <div class="col-lg-3 col-sm-4 col-xs-12 price">
                            <a href="/produkt-sluchawki/sluchawki-defender-cosmo-pro.html"><span class="price lead">od 143,56 PLN</span></a>
                            <a href="/produkt-sluchawki/sluchawki-defender-cosmo-pro.html" class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty <i class="fa fa-angle-right"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!---- product ends here ---->
            <!---- product starts here ---->
        <div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 product-wrapper-grid">
            <div class="product normal">
                <a href="/produkt-sluchawki/sluchawki-defender-shadow.html">
                    <div class="image">
                        <img class="img-responsive" src="http://offers.gallery/p-1f-44-1f44ab5ecedbac73ddf7750ca08c3b3c500x500/suchawki-defender-shadow.jpg" title="Słuchawki DEFENDER Shadow" />
                    </div>
                </a>
                <div class="product-details">
                    <div class="row">
                        <div class="col-lg-9 col-sm-8 col-xs-12 title-features">
                            <a href="/produkt-sluchawki/sluchawki-defender-shadow.html">
                                <h5 class="title">Słuchawki DEFENDER Shadow</h5>
                            </a>
                            <div class="product-details-popup text-center">
                                                                <a href="/produkt-sluchawki/sluchawki-defender-shadow.html" data-container="body" data-placement="left" data-toggle="tooltip" >
                                    <i class="fa fa-align-justify"></i>
                                    <div class="tooltip_title_wrapper hidden">
                                        <p>Czułość słuchawek: 102dB &amp;#43;/-3dB Długość kabla / Maksymalny zasięg: 2.00 m Impedancja (Om): 32.0 dane dodatkowe: linia produktów dla graczy Dobra izolacja dźwiękowa Adapter 2 x mini jack w...</p>
                                    </div>
                                </a>
                                                                                                                                                            </div>
                            <ul class="features">
                                                            </ul>
                        </div>
                        <div class="col-lg-3 col-sm-4 col-xs-12 price">
                            <a href="/produkt-sluchawki/sluchawki-defender-shadow.html"><span class="price lead">od 130,92 PLN</span></a>
                            <a href="/produkt-sluchawki/sluchawki-defender-shadow.html" class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty <i class="fa fa-angle-right"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!---- product ends here ---->
            <!---- product starts here ---->
        <div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 product-wrapper-grid">
            <div class="product normal">
                <a href="/produkt-sluchawki/sluchawki-meliconi-hp50.html">
                    <div class="image">
                        <img class="img-responsive" src="http://offers.gallery/p-b9-18-b91899f206cfdfa4ecf8ab4398f3bd44500x500/suchawki-meliconi-hp50.jpg" title="Słuchawki MELICONI HP50" />
                    </div>
                </a>
                <div class="product-details">
                    <div class="row">
                        <div class="col-lg-9 col-sm-8 col-xs-12 title-features">
                            <a href="/produkt-sluchawki/sluchawki-meliconi-hp50.html">
                                <h5 class="title">Słuchawki MELICONI HP50</h5>
                            </a>
                            <div class="product-details-popup text-center">
                                                                <a href="/produkt-sluchawki/sluchawki-meliconi-hp50.html" data-container="body" data-placement="left" data-toggle="tooltip" >
                                    <i class="fa fa-align-justify"></i>
                                    <div class="tooltip_title_wrapper hidden">
                                        <p>Słuchawki stereofoniczne TV z przewodem, wysokiej jakości. Prędkie połączenie z telewizorami, odtwarzaczami DVD, Blu-ray, CD, systemami audio Hi-Fi i innymi źródłami dźwięku. Bezspinkowy przewód o...</p>
                                    </div>
                                </a>
                                                                                                                                                            </div>
                            <ul class="features">
                                                            </ul>
                        </div>
                        <div class="col-lg-3 col-sm-4 col-xs-12 price">
                            <a href="/produkt-sluchawki/sluchawki-meliconi-hp50.html"><span class="price lead">od 109,99 PLN</span></a>
                            <a href="/produkt-sluchawki/sluchawki-meliconi-hp50.html" class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty <i class="fa fa-angle-right"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!---- product ends here ---->
            <!---- product starts here ---->
        <div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 product-wrapper-grid">
            <div class="product normal">
                <a href="/produkt-sluchawki/sluchawki-nauszne-audictus-winner.html">
                    <div class="image">
                        <img class="img-responsive" src="http://offers.gallery/p-f9-e9-f9e9271ee8e5e2c96a21f73782ac1d16500x500/suchawki-nauszne-audictus-winner.jpg" title="Słuchawki nauszne AUDICTUS Winner" />
                    </div>
                </a>
                <div class="product-details">
                    <div class="row">
                        <div class="col-lg-9 col-sm-8 col-xs-12 title-features">
                            <a href="/produkt-sluchawki/sluchawki-nauszne-audictus-winner.html">
                                <h5 class="title">Słuchawki nauszne AUDICTUS Winner</h5>
                            </a>
                            <div class="product-details-popup text-center">
                                                                <a href="/produkt-sluchawki/sluchawki-nauszne-audictus-winner.html" data-container="body" data-placement="left" data-toggle="tooltip" >
                                    <i class="fa fa-align-justify"></i>
                                    <div class="tooltip_title_wrapper hidden">
                                        <p>WINNER POSZUKUJ, POPEŁNIAJ BŁĘDY WRACAJ SILNIEJSZY! SZUKAJ WŁASNEJ DROGI, POPEŁNIAJ BŁĘDY I WRACAJ SILNIEJSZY! Gdy zrealizujesz kolejny cel, osiągniesz kolejny nieznaczny albo znaczny sukces,...</p>
                                    </div>
                                </a>
                                                                                                                                    <a href="/produkt-sluchawki/sluchawki-nauszne-audictus-winner.html" data-container="body" data-placement="left" data-toggle="tooltip">
                                        <i class="fa fa-tag"></i>

                                        <div class="tooltip_title_wrapper hidden">
                                            Na tym produkcie możesz zaoszczędzić aż  12%
                                        </div>
                                    </a>
                                                                                            </div>
                            <ul class="features">
                                                                    <li>Mikrofon:
                                        <em>    tak


</em>
                                    </li>
                                                                    <li>Rodzaj połączenia:
                                        <em>    bezprzewodowe


</em>
                                    </li>
                                                            </ul>
                        </div>
                        <div class="col-lg-3 col-sm-4 col-xs-12 price">
                            <a href="/produkt-sluchawki/sluchawki-nauszne-audictus-winner.html"><span class="price lead">od 96,97 PLN</span></a>
                            <a href="/produkt-sluchawki/sluchawki-nauszne-audictus-winner.html" class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty <i class="fa fa-angle-right"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!---- product ends here ---->
            <!---- product starts here ---->
        <div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 product-wrapper-grid">
            <div class="product normal">
                <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253Dgf61M7eHxm79Z0q%2524W1Z2qJvLih3WS9uiPIitStINdokC9Ve8M7GZU%252A38uUwJo81cCksvtUzUgxZR1eEcFppqStjeZdimWQR0%2524ux9PaZnrCS%252APvEZLACExS7ry1SOAxbY_P.API_23_24_" rel="nofollow">
                    <div class="image">
                        <img class="img-responsive" src="http://offers.gallery/p-63-39-6339c3b7c495904ac6e5761ec2177d91500x500/defender-suchawki-bezprzewodowe-freemotion-63551.jpg" title="DEFENDER SŁUCHAWKI BEZPRZEWODOWE FREEMOTION 63551" />
                    </div>
                </a>
                <div class="product-details">
                    <div class="row">
                        <div class="col-lg-9 col-sm-8 col-xs-12 title-features">
                            <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253Dgf61M7eHxm79Z0q%2524W1Z2qJvLih3WS9uiPIitStINdokC9Ve8M7GZU%252A38uUwJo81cCksvtUzUgxZR1eEcFppqStjeZdimWQR0%2524ux9PaZnrCS%252APvEZLACExS7ry1SOAxbY_P.API_23_24_" rel="nofollow">
                                <h5 class="title">DEFENDER SŁUCHAWKI BEZPRZEWODOWE FREEMOTION 63551</h5>
                            </a>
                            <div class="product-details-popup text-center">
                                                                <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253Dgf61M7eHxm79Z0q%2524W1Z2qJvLih3WS9uiPIitStINdokC9Ve8M7GZU%252A38uUwJo81cCksvtUzUgxZR1eEcFppqStjeZdimWQR0%2524ux9PaZnrCS%252APvEZLACExS7ry1SOAxbY_P.API_23_24_" rel="nofollow" data-container="body" data-placement="left" data-toggle="tooltip" >
                                    <i class="fa fa-align-justify"></i>
                                    <div class="tooltip_title_wrapper hidden">
                                        <p>spory wybór artykułów RTV i AGD. Komputery i sprzęt do gamingu. Znajdź coś dla siebie! Wybrane produkty z darmową dostawą. Poznaj pełną ofertę Sferis! Ekspresowa przesyłka.</p>
                                    </div>
                                </a>
                                                                                                                                                                    <a href="/produkt-sluchawki/defender-sluchawki-bezprzewodowe-freemotion-63551.html"><i class="fa fa-link"></i></a>
                                                            </div>
                            <ul class="features">
                                                            </ul>
                        </div>
                        <div class="col-lg-3 col-sm-4 col-xs-12 price">
                            <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253Dgf61M7eHxm79Z0q%2524W1Z2qJvLih3WS9uiPIitStINdokC9Ve8M7GZU%252A38uUwJo81cCksvtUzUgxZR1eEcFppqStjeZdimWQR0%2524ux9PaZnrCS%252APvEZLACExS7ry1SOAxbY_P.API_23_24_" rel="nofollow"><span class="price lead">83,90 PLN</span></a>
                            <a target="_blank" href="/click%252FClick%252FOffer%252F%253Fclick%253Dgf61M7eHxm79Z0q%2524W1Z2qJvLih3WS9uiPIitStINdokC9Ve8M7GZU%252A38uUwJo81cCksvtUzUgxZR1eEcFppqStjeZdimWQR0%2524ux9PaZnrCS%252APvEZLACExS7ry1SOAxbY_P.API_23_24_" rel="nofollow" class="btn btn-success btn-success-outlined btn-icon-right">Przejdź do sklepu <i class="fa fa-angle-right"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!---- product ends here ---->
            <!---- product starts here ---->
        <div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 product-wrapper-grid">
            <div class="product normal">
                <a href="/produkt-sluchawki/sluchawki-leet-assassin-s-creed-rgb.html">
                    <div class="image">
                        <img class="img-responsive" src="http://offers.gallery/p-50-02-5002f8aad9703d40d1a524837b83bc14500x500/suchawki-leet-assassin39s-creed-rgb.jpg" title="Słuchawki LEET Assassin&#39;s Creed RGB" />
                    </div>
                </a>
                <div class="product-details">
                    <div class="row">
                        <div class="col-lg-9 col-sm-8 col-xs-12 title-features">
                            <a href="/produkt-sluchawki/sluchawki-leet-assassin-s-creed-rgb.html">
                                <h5 class="title">Słuchawki LEET Assassin&#39;s Creed RGB</h5>
                            </a>
                            <div class="product-details-popup text-center">
                                                                <a href="/produkt-sluchawki/sluchawki-leet-assassin-s-creed-rgb.html" data-container="body" data-placement="left" data-toggle="tooltip" >
                                    <i class="fa fa-align-justify"></i>
                                    <div class="tooltip_title_wrapper hidden">
                                        <p>Słuchawki gamingowe Assassin&amp;#39;s Creed RGB charakteryzują się doskonałym dźwiękiem i dużą wygodą....</p>
                                    </div>
                                </a>
                                                                                                                                                            </div>
                            <ul class="features">
                                                            </ul>
                        </div>
                        <div class="col-lg-3 col-sm-4 col-xs-12 price">
                            <a href="/produkt-sluchawki/sluchawki-leet-assassin-s-creed-rgb.html"><span class="price lead">od 157,57 PLN</span></a>
                            <a href="/produkt-sluchawki/sluchawki-leet-assassin-s-creed-rgb.html" class="btn btn-success btn-success-outlined btn-icon-right">Porównaj oferty <i class="fa fa-angle-right"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!---- product ends here ---->
    

    </div>
    <div class="row">
        <div class="col-xs-12 text-center" data-links='keep-view'>
            
<!--  ==========  -->
<!--  = Pagination =  -->
<!--  ==========  -->
<ul class="pagination">
        
            <li class="active"><a href="/produkty-produkt:s%C5%82uchawki--1.html">1</a></li>
            <li ><a href="/produkty-produkt:s%C5%82uchawki--2.html">2</a></li>
            <li ><a href="/produkty-produkt:s%C5%82uchawki--3.html">3</a></li>
            <li ><a href="/produkty-produkt:s%C5%82uchawki--4.html">4</a></li>
            <li ><a href="/produkty-produkt:s%C5%82uchawki--5.html">5</a></li>
            <li ><a href="/produkty-produkt:s%C5%82uchawki--6.html">6</a></li>
            <li ><a href="/produkty-produkt:s%C5%82uchawki--7.html">7</a></li>
            <li ><a href="/produkty-produkt:s%C5%82uchawki--8.html">8</a></li>
            <li ><a href="/produkty-produkt:s%C5%82uchawki--9.html">9</a></li>
            <li ><a href="/produkty-produkt:s%C5%82uchawki--10.html">10</a></li>
            <li ><a href="/produkty-produkt:s%C5%82uchawki--11.html">11</a></li>
            <li ><a href="/produkty-produkt:s%C5%82uchawki--12.html">12</a></li>
    
            <li>
            <span>...</span>
        </li>
        <li ><a href="/produkty-produkt:s%C5%82uchawki--142.html">142</a></li>
                <li>
            <a href="/produkty-produkt:s%C5%82uchawki--2.html" class="next">Następna</a>
        </li>
    </ul> <!-- /pagination -->
        </div>
    </div>

    </div>


    </div>



    </div>

    <footer>
        <div class="container">
            <div class="row">
                <div class="col-md-5">
                    <h5>O nas</h5>
                    <p>Porownywarka.co to serwis pozwalający na porównanie cen w najlepszych sklepach internetowych w
                        Polsce. Został stworzony, by ułatwić użytkownikom Internetu znalezienie najniższych cen i
                        wygodne e-zakupy. Porównaj oferty kilku tysięcy sklepów internetowych.</p>
                </div>
                <div class="col-md-7">
                    <h5>Dla sklepów</h5>
                    <p>Chcesz, aby znalazła się tutaj również oferta Twojego sklepu? Operatorem danych dla
                        serwisu Porownywarka.co jest Nokaut.pl, porównywarka cen i sieć reklamowa odwiedzana przez kilka
                        milionów użytkowników każdego miesiąca. Skontaktuj się skorzystaj z kontakt@nokaut.pl.</p>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    Copyright © 2023. Wszystkie prawa zastrzeżone.
                    <a href="http://localhost:8000/mapa-kategorii">Mapa kategorii</a>
                </div>
            </div>
        </div>
    </footer>

    <div id="modal-preloader" class="modal-backdrop fade in text-center" style="display:none;padding-top:100px;"><img
                src="/images/progress-circle-info.svg"></div>
        <script src="/js/bootstrap.min.js"></script>
    <script src="/js/owl.carousel.min.js"></script>
    <script src="/js/jquery.bxslider.min.js"></script>
    <script src="/js/jquery.growl.js" type="text/javascript"></script>
    <script src="/js/common.js"></script>


    <script src="/js/isotope.pkgd.min.js"></script>

    </body>
</html>
";s:10:" * version";s:3:"1.0";s:13:" * statusCode";i:200;s:13:" * statusText";s:2:"OK";s:10:" * charset";N;}